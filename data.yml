defaultStorageMapping: SAMPLE
jobs:
  Job-1:
    excludeSelector: ""
    id: 1
    includeSelector: "{ subgraph: \"NORTHWIND\" }"
    name: JOB_NORTHWIND
    steps: []
    subgraphs: []
  Job-3:
    excludeSelector: ""
    id: 3
    includeSelector: "{ subgraph: \"ADVENTURE_WORKS\" }"
    name: JOB_ADVENTURE_WORKS
    steps: []
    subgraphs: []
  Job-4:
    excludeSelector: ""
    id: 4
    includeSelector: "{ subgraph: \"SPORTS\" }"
    name: JOB_SPORTS
    steps: []
    subgraphs: []
  Job-5:
    excludeSelector: ""
    id: 5
    includeSelector: "{ subgraph: \"SALES\" }"
    name: JOB_SALES
    steps: []
    subgraphs: []
  Job-6:
    excludeSelector: ""
    id: 6
    includeSelector: "{ subgraph: \"WIDEWORLDIMPORTERS\" }"
    name: JOB_WIDEWORLDIMPORTERS
    steps: []
    subgraphs: []
  Job-7:
    excludeSelector: ""
    id: 7
    includeSelector: "{ subgraph: \"PERBANK\" }"
    name: JOB_PERBANK
    steps: []
    subgraphs: []
  Job-9:
    excludeSelector: ""
    id: 9
    includeSelector: "{ subgraph: \"COVID19\" }"
    name: JOB_COVID19
    steps: []
    subgraphs: []
locations:
  ADV_WRKS_SRC:
    mappingDefinitions:
      "2":
        database: ADVENTURE_WORKS
        schema: SOURCE
  COVID19:
    mappingDefinitions:
      "2":
        database: COVID19
        schema: SOURCE
  NORTHWIND_SRC:
    mappingDefinitions:
      "2":
        database: NORTHWIND
        schema: SOURCE
  PERBANK_SRC:
    mappingDefinitions:
      "2":
        database: PERBANK
        schema: SOURCE
  SALES_SRC:
    mappingDefinitions:
      "2":
        database: SALES
        schema: SOURCE
  SAMPLE:
    mappingDefinitions:
      "2":
        database: SANDBOX
        schema: TARGET
  SPORTS_SRC:
    mappingDefinitions:
      "2":
        database: SPORTS
        schema: SOURCE
  STAGING:
    mappingDefinitions:
      "2":
        database: SANDBOX
        schema: TARGET
  TARGET:
    mappingDefinitions:
      "2":
        database: SANDBOX
        schema: TARGET
  WIDEWORLIMPORTES_SRC:
    mappingDefinitions:
      "2":
        database: WIDEWORLDIMPORTERS
        schema: SOURCE
  WORK:
    mappingDefinitions:
      "2":
        database: SANDBOX
        schema: TARGET
macros:
  Macro-SCALEFREE-DATAVAULT4COALESCE::1:
    id: SCALEFREE-DATAVAULT4COALESCE::1
    macroString: |+
      {%- set datavault4coalesce = namespace(

           config = {
           "ldts_alias": "LDTS",
           "rsrc_alias": "RSRC", 
           "ledts_alias": "LEDTS", 
           "snapshot_trigger_column": "IS_ACTIVE",
           "sdts_alias": "SDTS",
           "is_current_col_alias": "IS_CURRENT", 
           "hash": "MD5", 
           "hash_datatype": "STRING", 
           "hash_input_case_sensitive": "TRUE",
           "hash_passthrough_input_transformations": "TRUE",
           "beginning_of_all_times": "0001-01-01T00:00:01", 
           "end_of_all_times": "8888-12-31T23:59:59",
           "timestamp_format": "YYYY-MM-DDTHH24:MI:SS", 
           "default_unknown_rsrc": "SYSTEM", 
           "default_error_rsrc": "ERROR", 
           "rsrc_default_dtype": "STRING", 
           "stg_default_dtype": "STRING", 
           "error_value__STRING": "'(error)'", 
           "error_value_alt__STRING": "'e'", 
           "unknown_value__STRING": "'(unknown)'",
           "unknown_value_alt__STRING": "'u'"
           }

      ) -%}


      {%- macro datavault4coalesce__string_to_timestamp(format, timestamp) -%}
          TO_TIMESTAMP('{{ timestamp }}', '{{ format }}')
      {%- endmacro -%}


      {%-macro record_source()-%}
      {#--USAGE:{{record_source()}}#}
      {#--NOTES:Adds a Record Source (name of qualified previous table/view)#}
      {%- if sources[0].dependencies -%}
           {% set src = storageLocations | selectattr('name', "equalto", sources[0].dependencies[0].node.location.name) | list | first %} 
           '"{{src.database}}"."{{src.schema}}"."{{sources[0].dependencies[0].node.name}}"'
      {%- else -%}
           'Missing Dependencies!'
      {%- endif -%}
      {%- endmacro -%}


      {%- macro datavault4coalesce__is_expression(obj) -%}

           {%- if obj is string -%}
                {%- if (obj|first == "'" and obj|last == "'") or ("(" in obj and ")" in obj) or "::" in obj or "||" in obj -%}
                     {{ true }}
                {%- else -%}
                     {{ false }}
                {%- endif -%}
           {%- else -%}
                {{ false }}
           {%- endif -%}

      {%- endmacro -%}


      {%- macro datavault4coalesce__escape_column_name(column) -%}

           {%- set escape_char_left  = '"' -%}
           {%- set escape_char_right = '"' -%}

           {%- set escaped_column_name = escape_char_left ~ column|upper|replace(escape_char_left, '')|replace(escape_char_right, '')|trim ~ escape_char_right|indent(4) -%}

           {{ escaped_column_name }}

      {%- endmacro -%}


      {%- macro datavault4coalesce__as_constant(column_str) -%}

           {%- if column_str is not none and column_str is string and column_str -%}
                {%- if column_str|first == "!" -%}
                     {{- "'" ~ column_str[1:] ~ "'" -}}
                {%- else -%}
                     {%- if datavault4coalesce__is_expression(column_str) -%}
                          {{- column_str -}}
                     {%- else -%}
                          {{- datavault4coalesce__escape_column_name(column_str) -}}
                     {%- endif -%}
                {%- endif -%}
           {%- endif -%}
      {%- endmacro -%}


      {%- macro datavault4coalesce__ghost_record_per_datatype(column_name, datatype, ghost_record_type, hash, hash_algo=none) -%}

      {%- set beginning_of_all_times = datavault4coalesce.config.beginning_of_all_times -%}
      {%- set end_of_all_times = datavault4coalesce.config.end_of_all_times -%}
      {%- set timestamp_format = datavault4coalesce.config.timestamp_format -%}
      {%- set unknown_value__STRING = datavault4coalesce.config.unknown_value__STRING -%}
      {%- set unknown_value_alt__STRING = datavault4coalesce.config.unknown_value_alt__STRING -%}
      {%- set error_value__STRING = datavault4coalesce.config.error_value__STRING -%}
      {%- set error_value_alt__STRING = datavault4coalesce.config.error_value_alt__STRING -%}

      {%- if hash %}

           {%- set datatype = datatype|upper -%}
           {%- set hash_alg = datavault4coalesce__hash_algorithm(hash_function=hash_algo, hash_datatype=datatype) -%}
           {%- set unknown_key = datavault4coalesce__unknown_key(hash_function=hash_algo, hash_datatype=datatype) -%}
           {%- set error_key = datavault4coalesce__error_key(hash_function=hash_algo, hash_datatype=datatype) -%}

           {%- if ghost_record_type == 'unknown' -%}
                {{ unknown_key }} as {{ column_name }}
           {%- elif ghost_record_type == 'error' -%}
                {{ error_key }} as {{ column_name }}
           {% endif %}

      {% else %}

           {%- if ghost_record_type == 'unknown' -%}
           {%- if datatype in ['TIMESTAMP_NTZ','TIMESTAMP', 'DATE'] -%}{{ datavault4coalesce__string_to_timestamp(timestamp_format, beginning_of_all_times) }} AS {{ column_name }}
           {% elif datatype.upper().startswith('STRING') or datatype.upper().startswith('VARCHAR') %}
                {%- if datatype.upper().startswith('VARCHAR') and datatype[8:-1]|int >= unknown_value__STRING|length -%} {{unknown_value__STRING}} AS {{ column_name }}
                {%- elif datatype.upper().startswith('STRING') -%} {{unknown_value__STRING}} AS {{ column_name }}
                {% else %} {{unknown_value_alt__STRING}} AS {{ column_name }}
                {% endif %}
           {% elif datatype in ['NUMBER','INT','FLOAT','DECIMAL'] or datatype.upper().startswith('NUMBER') %}0 AS {{ column_name }}
           {% elif datatype == 'BOOLEAN' %}CAST('FALSE' AS BOOLEAN) AS {{ column_name }}
           {% else %}NULL AS {{ column_name }}
           {% endif %}
           {%- elif ghost_record_type == 'error' -%}
           {%- if datatype in ['TIMESTAMP_NTZ','TIMESTAMP', 'DATE'] -%}{{ datavault4coalesce__string_to_timestamp(timestamp_format, end_of_all_times) }} AS {{ column_name }}
           {% elif datatype.upper().startswith('STRING') or datatype.upper().startswith('VARCHAR') %}
                {%- if datatype.upper().startswith('VARCHAR') and datatype[8:-1]|int >= error_value__STRING|length -%} {{error_value__STRING}} AS {{ column_name }}
                {%- elif datatype.upper().startswith('STRING') -%} {{error_value__STRING}} AS {{ column_name }}
                {% else %} {{error_value_alt__STRING}} AS {{ column_name }}
                {% endif %}
           {% elif datatype in ['NUMBER','INT','FLOAT','DECIMAL'] or datatype.upper().startswith('NUMBER') %}-1 AS {{ column_name }}
           {% elif datatype == 'BOOLEAN' %}CAST('FALSE' AS BOOLEAN) AS {{ column_name }}
           {% else %}NULL AS {{ column_name }}
           {% endif %}
           {%- endif -%}

      {%- endif -%}

      {%- endmacro -%}


      {%- macro datavault4coalesce__hash_algorithm(hash_function=none, hash_datatype=none) -%}

           {%- if hash_function is none -%}
                {%- set hash_function = datavault4coalesce.config.hash -%}
           {%- endif -%}
           {%- if hash_datatype is none -%}
                {%- set hash_datatype = datavault4coalesce.config.hash_datatype -%}
           {%- endif -%}  

           {%- set dict_result = {} -%}
           {%- set hash_alg = '' -%}

           {%- if hash_function == 'MD5' -%}
                {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}
                     {%- set hash_alg = 'MD5' -%}
                {%- elif 'BINARY' in hash_datatype -%}
                     {%- set hash_alg = 'MD5_BINARY' -%}       
                {%- endif -%}
           {%- elif hash_function == 'SHA1' or hash_function == 'SHA1_HEX' or hash_function == 'SHA' -%} 
                {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}
                     {%- set hash_alg = 'SHA1' -%}
                {%- elif 'BINARY' in hash_datatype -%}
                     {%- set hash_alg = 'SHA1_BINARY' -%}       
                {%- endif -%}
           {%- elif hash_function == 'SHA2' or hash_function == 'SHA2_HEX' or hash_function == 'SHA256' -%}
                {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}
                     {%- set hash_alg = 'SHA2' -%}
                {%- elif 'BINARY' in hash_datatype -%}
                     {%- set hash_alg = 'SHA2_BINARY' -%}       
                {%- endif -%}   
           {%- endif -%}

           {{ hash_alg }}

      {%- endmacro -%}


      {%- macro datavault4coalesce__unknown_key(hash_function=none, hash_datatype=none) -%}
           {%- if hash_function is none -%}
                {%- set hash_function = datavault4coalesce.config.hash -%}
           {%- endif -%}
           {%- if hash_datatype is none -%}
                {%- set hash_datatype = datavault4coalesce.config.hash_datatype -%}
           {%- endif -%}     

           {%- set dict_result = {} -%}
           {%- set unknown_key = '' -%}

           {%- if hash_function == 'MD5' -%}
                {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}
                     {%- set unknown_key = '!00000000000000000000000000000000' -%}
                {%- elif 'BINARY' in hash_datatype -%}  
                     {%- set unknown_key = "TO_BINARY('00000000000000000000000000000000')" -%}     
                {%- endif -%}                       
           {%- elif hash_function == 'SHA1' or hash_function == 'SHA1_HEX' or hash_function == 'SHA' -%} 
                {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}
                     {%- set unknown_key = '!0000000000000000000000000000000000000000' -%}
                {%- elif 'BINARY' in hash_datatype -%}
                     {%- set unknown_key = "TO_BINARY('0000000000000000000000000000000000000000')" -%}     
                {%- endif -%}
           {%- elif hash_function == 'SHA2' or hash_function == 'SHA2_HEX' or hash_function == 'SHA256'  -%}
                {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}
                     {%- set unknown_key = '!0000000000000000000000000000000000000000000000000000000000000000' -%}
                {%- elif 'BINARY' in hash_datatype -%}
                     {%- set unknown_key = "TO_BINARY('0000000000000000000000000000000000000000000000000000000000000000')" -%}  
                {%- endif -%}   
           {%- endif -%}

           {% set unknown_key = datavault4coalesce__as_constant(unknown_key) %}
           {{ unknown_key }}

      {%- endmacro -%}


      {%- macro datavault4coalesce__error_key(hash_function=none, hash_datatype=none) -%}
           {%- if hash_function is none -%}
                {%- set hash_function = datavault4coalesce.config.hash -%}
           {%- endif -%}
           {%- if hash_datatype is none -%}
                {%- set hash_datatype = datavault4coalesce.config.hash_datatype -%}
           {%- endif -%}  

           {%- set dict_result = {} -%}
           {%- set error_key = '' -%}

           {%- if hash_function == 'MD5' -%}
                {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}
                     {%- set error_key = '!ffffffffffffffffffffffffffffffff' -%}
                {%- elif 'BINARY' in hash_datatype -%}  
                     {%- set error_key = "TO_BINARY('ffffffffffffffffffffffffffffffff')" -%}     
                {%- endif -%}          
           {%- elif hash_function == 'SHA1' or hash_function == 'SHA1_HEX' or hash_function == 'SHA' -%} 
                {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}
                     {%- set error_key = '!ffffffffffffffffffffffffffffffffffffffff' -%}
                {%- elif 'BINARY' in hash_datatype -%}
                     {%- set error_key = "TO_BINARY('ffffffffffffffffffffffffffffffffffffffff')" -%}        
                {%- endif -%}
           {%- elif hash_function == 'SHA2' or hash_function == 'SHA2_HEX' or hash_function == 'SHA256'  -%}
                {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}
                     {%- set error_key = '!ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' -%}
                {%- elif 'BINARY' in hash_datatype -%}
                     {%- set error_key = "TO_BINARY('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')" -%}        
                {%- endif -%}   
           {%- endif -%}

           {% set error_key = datavault4coalesce__as_constant(error_key) %}
           {{ error_key }}

      {%- endmacro -%}


      {%- macro datavault4coalesce__is_something(obj) -%}

          {%- if obj is not none and obj is defined and obj -%}
              {{ true }}
          {%- else -%}
              {{ false }}
          {%- endif -%}

      {%- endmacro -%}


      {%- macro datavault4coalesce__attribute_standardise() -%}

      CONCAT('\"', REPLACE(REPLACE(REPLACE(TRIM(CAST([EXPRESSION] AS STRING)), '\\', '\\\\'), '[QUOTE]', '\"'), '[NULL_PLACEHOLDER_STRING]', '--'), '\"')

      {%- endmacro -%}


      {%- macro datavault4coalesce__standardise_prefix(case_sensitive, hash_alg, datatype, zero_key, alias) -%}

      {%- set dict_result = {} -%}

      {%- set zero_key = datavault4coalesce__as_constant(column_str=zero_key) -%}

      {%- if 'VARCHAR' in datatype or 'CHAR' in datatype or 'STRING' in datatype or 'TEXT' in datatype %}

          {%- if case_sensitive -%}
              
              {%- set standardise_prefix = "COALESCE(LOWER({}(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(".format(hash_alg)-%}

          {%- else -%}
              
              {%- set standardise_prefix = "COALESCE(LOWER({}(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(".format(hash_alg)-%}

          {%- endif -%}

      {%- else -%}

          {%- if case_sensitive -%}
              
              {%- set standardise_prefix = "COALESCE({}(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(".format(hash_alg)-%}

          {%- else -%}
              
              {%- set standardise_prefix = "COALESCE({}(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(".format(hash_alg)-%}

          {%- endif -%}

      {%- endif -%}

      {{ standardise_prefix }}

      {%- endmacro -%}


      {%- macro datavault4coalesce__standardise_suffix(case_sensitive, hash_alg, datatype, zero_key, alias) -%}

      {%- set dict_result = {} -%}

      {%- set zero_key = datavault4coalesce__as_constant(column_str=zero_key) -%}

      {%- if 'VARCHAR' in datatype or 'CHAR' in datatype or 'STRING' in datatype or 'TEXT' in datatype %}

          {%- if case_sensitive -%}
       
              {%- if alias is not none -%}
                  {%- set standardise_suffix = "\n)), '\\n', '') \n, '\\t', '') \n, '\\v', '') \n, '\\r', '') AS STRING), '[ALL_NULL]'))), {}) AS {}".format(zero_key, alias)-%}
              {%- else -%}
                  {%- set standardise_suffix = "\n)), '\\n', '') \n, '\\t', '') \n, '\\v', '') \n, '\\r', '') AS STRING), '[ALL_NULL]'))), {})".format(zero_key)-%}
              {%- endif -%}

          {%- else -%}
       
              {%- if alias is not none -%}
                  {%- set standardise_suffix = "\n), '\\n', '') \n, '\\t', '') \n, '\\v', '') \n, '\\r', '') AS STRING), '[ALL_NULL]'))), {}) AS {}".format(zero_key, alias)-%}
              {%- else -%}
                  {%- set standardise_suffix = "\n), '\\n', '') \n, '\\t', '') \n, '\\v', '') \n, '\\r', '') AS STRING), '[ALL_NULL]'))), {})".format(zero_key)-%}
              {%- endif -%}

          {%- endif -%}

      {%- else -%}

          {%- if case_sensitive -%}

              {%- if alias is not none -%}
                  {%- set standardise_suffix = "\n)), '\\n', '') \n, '\\t', '') \n, '\\v', '') \n, '\\r', '') AS STRING), '[ALL_NULL]')), {}) AS {}".format(zero_key, alias)-%}
              {%- else -%}
                  {%- set standardise_suffix = "\n)), '\\n', '') \n, '\\t', '') \n, '\\v', '') \n, '\\r', '') AS STRING), '[ALL_NULL]')), {})".format(zero_key)-%}
              {%- endif -%}

          {%- else -%}

              {%- if alias is not none -%}
                  {%- set standardise_suffix = "\n), '\\n', '') \n, '\\t', '') \n, '\\v', '') \n, '\\r', '') AS STRING), '[ALL_NULL]')), {}) AS {}".format(zero_key, alias)-%}
              {%- else -%}
                  {%- set standardise_suffix = "\n), '\\n', '') \n, '\\t', '') \n, '\\v', '') \n, '\\r', '') AS STRING), '[ALL_NULL]')), {})".format(zero_key)-%}
              {%- endif -%}

          {%- endif -%}

      {%- endif -%}

      {{ standardise_suffix }}

      {%- endmacro -%}


      {%- macro datavault4coalesce__hash(columns, alias=none, datatype='STRING', algo='MD5') -%}

      {%- set concat_string = '||' -%}
      {%- set quote = '"' -%}
      {%- set null_placeholder_string = '^^' -%}

      {%- set hash_input_case_sensitive = datavault4coalesce.config.hash_input_case_sensitive -%}

      {#- Select hashing algorithm -#}
      {%- set datatype = datatype|upper -%}
      {%- set hash_alg = datavault4coalesce__hash_algorithm(hash_function=algo, hash_datatype=datatype) -%}
      {%- set unknown_key = datavault4coalesce__unknown_key(hash_function=algo, hash_datatype=datatype) -%}
      {%- set error_key = datavault4coalesce__error_key(hash_function=algo, hash_datatype=datatype) -%}

      {%- set ns = namespace(columns=[], all_null=[]) -%}

      {%- set attribute_standardise = datavault4coalesce__attribute_standardise() %}

      {%- set columns_input = columns -%}

      {%- for column in columns_input -%}
           {%- set ns.columns = ns.columns + [column.name] -%}
      {%- endfor -%}


      {%- set standardise_prefix = datavault4coalesce__standardise_prefix(case_sensitive=hash_input_case_sensitive, hash_alg=hash_alg, datatype=hash_dtype, alias=alias, zero_key=unknown_key) -%}
      {%- set standardise_suffix = datavault4coalesce__standardise_suffix(case_sensitive=hash_input_case_sensitive, hash_alg=hash_alg, datatype=hash_dtype, alias=alias, zero_key=unknown_key) -%}    

      {{ standardise_prefix }}

      {%- for column in columns -%}

          {%- set ns.all_null = ns.all_null + [null_placeholder_string] -%}

           {%- if datavault4coalesce.config.hash_passthrough_input_transformations -%}

                {%- set column_str = datavault4coalesce__as_constant(get_source_transform(column)) -%}

           {%- else -%}

                {%- if '.' in column.name %}
                     {% set column_str = column.name -%}
                {%- else -%}
                     {%- set column_str = datavault4coalesce__as_constant(column.name) -%}
                {%- endif -%}
           {%- endif -%}

          {{- "\nCOALESCE(({}), '{}')".format(attribute_standardise | replace('[EXPRESSION]', column_str) | replace('[QUOTE]', quote) | replace('[NULL_PLACEHOLDER_STRING]', null_placeholder_string), null_placeholder_string) | indent(4) -}}
          {{- ",'{}',".format(concat_string) if not loop.last -}}

          {%- if loop.last -%}

              {{ standardise_suffix | replace('[ALL_NULL]', ns.all_null | join("")) | indent(4) }}

          {%- else -%}

              {%- set ns.all_null = ns.all_null + [concat_string] -%}

          {%- endif -%}

      {%- endfor -%}

      {%- endmacro -%}





    packageInfo:
      id: SCALEFREE-DATAVAULT4COALESCE
      version: https://github.com/ScalefreeCOM/datavault4coalesce.git#main
packages:
  SCALEFREE-DATAVAULT4COALESCE:
    addedBy: TNkJiAjrrXb7e8IuNyIhYUnzjL92
    createdAt:
      nanoseconds: 181000000
      seconds: 1691528797
    id: SCALEFREE-DATAVAULT4COALESCE
    manifest:
      macros:
        SCALEFREE-DATAVAULT4COALESCE::1:
          id: SCALEFREE-DATAVAULT4COALESCE::1
          name: SCALEFREE-DATAVAULT4COALESCE::1
      stepTypes:
        SCALEFREE-DATAVAULT4COALESCE::12:
          id: SCALEFREE-DATAVAULT4COALESCE::12
          name: "Datavault by Scalefree: PIT"
        SCALEFREE-DATAVAULT4COALESCE::13:
          id: SCALEFREE-DATAVAULT4COALESCE::13
          name: "Datavault by Scalefree: Snapshot v0"
        SCALEFREE-DATAVAULT4COALESCE::14:
          id: SCALEFREE-DATAVAULT4COALESCE::14
          name: "Datavault by Scalefree: Snapshot v1"
        SCALEFREE-DATAVAULT4COALESCE::4:
          id: SCALEFREE-DATAVAULT4COALESCE::4
          name: "Datavault by Scalefree: Stage"
        SCALEFREE-DATAVAULT4COALESCE::6:
          id: SCALEFREE-DATAVAULT4COALESCE::6
          name: "Datavault by Scalefree: Hub"
        SCALEFREE-DATAVAULT4COALESCE::7:
          id: SCALEFREE-DATAVAULT4COALESCE::7
          name: "Datavault by Scalefree: Link"
        SCALEFREE-DATAVAULT4COALESCE::8:
          id: SCALEFREE-DATAVAULT4COALESCE::8
          name: "Datavault by Scalefree: Satellite v0"
        SCALEFREE-DATAVAULT4COALESCE::9:
          id: SCALEFREE-DATAVAULT4COALESCE::9
          name: "Datavault by Scalefree: Satellite v1"
    status: added
    version: https://github.com/ScalefreeCOM/datavault4coalesce.git#main
    versionInfo:
      commit: 016ad442cb5d5a182dd42e3e7d77c9a2ee968a73
projects: {}
stepTypes:
  StepType-1:
    id: "1"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGING
      error: null
      nodeMetadataSpec: |-
        capitalized: 'RM_Copy of Datavault by Scalefree: Stage'
        short: DVSTG
        plural: 'DATAVAULT BY SCALEFREE: STAGES'
        tagColor: '#AED6F1'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: view
            options:
            - view
            isRequired: true
            enableIf: "false"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true

        - groupName: Data Vault
          items:
          - displayName: Generate Ghost Records
            attributeName: generate_ghost_records
            type: toggleButton
            default: true

        systemColumns:
        - displayName: "LDTS"
          transform: SYSDATE()
          dataType: TIMESTAMP
          placement: end
          attributeName: is_system_ldts    
          description: "The Load Date Timestamp (LDTS) describes when this data first arrived in the Data Warehouse."
        - displayName: "RSRC"
          transform: "{{record_source()}}"
          dataType: STRING
          placement: end
          attributeName: is_system_rsrc    
          description: "The Record Source (RSRC) describes the source of this data."  
        - displayName: "TABLE_NAME"
          transform: "{{prev_table_name|replace('load_', '')}}"
          dataType: STRING
          placement: start
          attributeName: table_name
          description: "The name of the current Data Vault table."
      templates:
        create:
          templateString: |-
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}

            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) | replace('_load_', '_') }}
                (
                    {% for col in columns %}
                        {%- if col.is_rsrc_column -%}
                            "{{datavault4coalesce.config.rsrc_alias}}"
                        {%- elif col.is_ldts_column -%}
                            "{{datavault4coalesce.config.ldts_alias}}"
                        {% else %}
                            "{{ col.name }}"
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {% if col.hashDetails %}
                            {{ datavault4coalesce__hash(columns=col.hashDetails.columns, datatype=col.dataType, algo=col.hashDetails.algorithm) }} AS "{{ col.name }}"
                        {% else %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}

                    {%- if config.generate_ghost_records -%}

                        UNION ALL 

                        SELECT

                        {% for source in sources %}
                            {% for col in source.columns %}
                                {%- if "hashDetails" in col.keys() %}
                                    {{ datavault4coalesce__ghost_record_per_datatype(col.name, col.dataType, 'unknown', hash=true, hash_algo=col.hashDetails.algorithm) }}
                                {%- else -%}
                                    {{ datavault4coalesce__ghost_record_per_datatype(col.name, col.dataType, 'unknown', hash=false) }}
                                {%- endif -%}
                            {% if not loop.last %},{% endif %}
                            {% endfor %}
                        {% endfor %}

                        UNION ALL 

                        SELECT

                        {% for source in sources %}
                            {% for col in source.columns %}
                                {%- if "hashDetails" in col.keys() %}
                                    {{ datavault4coalesce__ghost_record_per_datatype(col.name, col.dataType, 'error', hash=true, hash_algo=col.hashDetails.algorithm) }}
                                {%- else -%}
                                    {{ datavault4coalesce__ghost_record_per_datatype(col.name, col.dataType, 'error', hash=false) }}
                                {%- endif -%}
                            {% if not loop.last %},{% endif %}
                            {% endfor %}
                        {% endfor %}

                    {%- endif -%}

                {% endfor %}

            {% endif %}
        run:
          templateString: ""
    name: "RM_Copy of Datavault by Scalefree: Stage"
    version: 1
  StepType-Dimension:
    id: Dimension
    isDisabled: false
    metadata:
      defaultStorageLocation: WORK
      error: null
      nodeMetadataSpec: |-
        capitalized: Dimension
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{{ stage('Create Dimension Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{% if col.isSurrogateKey %}
            		        identity
            			{% endif %}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
            	{{ stage('Create Dimension View') }}

            	CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%},{% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            	AS
            	{% for source in sources %}

            		{% if loop.first %}SELECT {% endif %}

            		{% for col in source.columns %}
            			{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
            			{% else %}
                            {{ get_source_transform(col) }}
            			{% endif %}
            			AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            		{{ source.join }}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

            {% endif %}
        run:
          templateString: |

            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}

            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}



                {% else %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% endif %}
            	
            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Dimension
    version: 1
  StepType-Fact:
    id: Fact
    isDisabled: false
    metadata:
      defaultStorageLocation: WORK
      error: null
      nodeMetadataSpec: |
        capitalized: Fact
        plural: Facts
        short: FCT
        tagColor: '#D9A438'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |2-

                {% if node.materializationType == 'table' %}
                    {{ stage('Create Fact Table') }}
                
                    CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if not col.nullable %} NOT NULL
                                {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                            {% endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                
                
                {% elif node.materializationType == 'view' %}
                    {{ stage('Create Fact View') }}
                
                    CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%},{% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                    AS
                    {% for source in sources %}
                
                        {% if loop.first %}SELECT {% endif %}
                
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                        {{ source.join }}
                
                        {% if not loop.last %} UNION ALL {% endif %}
                    {% endfor %}
                
                {% endif %}
                
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% if node.materializationType == 'table' %}
                    {% if config.preSQL %}
                        {{ stage('Pre-SQL') }}
                        {{ config.preSQL }}
                    {% endif %}
                    
                    {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
                    
                    {% for source in sources %}
                    
                        {% if has_business_key %}
                    
                            {{ stage('MERGE ' + source.name | string ) }}
                            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                            USING (
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last %}, {% endif %}
                                {% endfor %}
                                {{ source.join }})
                                AS "SRC"
                            ON
                            {% for col in source.columns if col.isBusinessKey -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                            {% endfor %}
                            WHEN MATCHED
                            {% for col in source.columns if not (   col.isBusinessKey or
                                                                    col.isSystemUpdateDate or
                                                                    col.isSystemCreateDate) %}
                                {% if loop.first %}
                                    AND (
                                {% else %}
                                    OR
                                {% endif %}
                                NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                                {% if loop.last %}
                                    )
                                {% endif %}
                            {% endfor %}
                            THEN UPDATE SET
                            {%- for col in source.columns if not (col.isBusinessKey or col.isSystemCreateDate) %}
                                    "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor %}
                            WHEN NOT MATCHED THEN
                            INSERT (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                            VALUES (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                    
                        {% else %}
                    
                            {{ stage('Insert ' + source.name | string ) }}
                    
                                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in source.columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                    
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                                {{ source.join }}
                        {% endif %}
                    {% endfor %}
                    {% if config.postSQL %}
                        {{ stage('Post-SQL') }}
                        {{ config.postSQL }}
                    {% endif %}
                {% endif %}

                {% if config.testsEnabled %}
                    {% for test in node.tests %}
                        {% if test.runOrder == 'After' %}
                            {{ test_stage(test.name, test.continueOnFailure) }}
                            {{ test.templateString }}
                        {% endif %}
                    {% endfor %}

                    {% for column in columns %}
                        {% for test in column.tests %}
                            {{ test_stage(column.name + ": " + test.name) }}
                            {{ test.templateString }}
                        {% endfor %}
                    {% endfor %}
                {% endif %}
                
                
    name: Fact
    version: 1
  StepType-Hub:
    id: Hub
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Hub
        short: 'HUB'
        plural: 'Hubs'

        tagColor: '#92712E'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options: 
            - table
            default: table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Hub Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}


            	{{ stage('Merge Hub') }}
            	MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            	(
            		{% for source in sources %}
            		SELECT
            		{% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		{{ source.join }}

            		{% if not loop.last %}
            			{{ config.insertStrategy }}
            		{% endif %}
            	{% endfor %}
            	)
            	AS "SRC"
            	ON
            	{% for col in sources[0].columns if (col.sourceColumns[0] 
                                                    and col.sourceColumns[0].column 
                                                    and col.sourceColumns[0].column.isHubHash
                                                    ) -%}
            		{% if not loop.first %}
            			AND
            		{% endif %}
            		"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            	{% endfor %}
            	WHEN NOT MATCHED THEN
            	INSERT
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	) VALUES
            	(
            		{% for col in columns %}
            			"SRC"."{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)


            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
            			
    name: Hub
    version: 1
  StepType-Link:
    id: Link
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Link
        short: 'LNK'
        plural: 'Links'
        tagColor: '#CA2287'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Link Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	
            	{% endif %}

            			
            	{{ stage('Merge Link') }}
            	MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            	(
            		{% for source in sources %}
            		SELECT
            		{% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		{{ source.join }}

            		{% if not loop.last %}
            			{{ config.insertStrategy }}
            		{% endif %}
            	{% endfor %}
            	)
            	AS "SRC"
            	ON
            	{% for col in sources[0].columns if (col.sourceColumns[0] 
                                                    and col.sourceColumns[0].column 
                                                    and col.sourceColumns[0].column.isLinkHash
                                                    ) -%}
            		{% if not loop.first %}
            			AND
            		{% endif %}
            		"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            	{% endfor %}
            	WHEN NOT MATCHED THEN
            	INSERT
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	) VALUES
            	(
            		{% for col in columns %}
            			"SRC"."{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)

            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}	
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
            			
    name: Link
    version: 1
  StepType-SCALEFREE-DATAVAULT4COALESCE::12:
    id: SCALEFREE-DATAVAULT4COALESCE::12
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: 'DATAVAULT BY SCALEFREE: PIT'
        short: 'PIT'
        tagColor: '#C0C0C0'
        plural: 'DATAVAULT BY SCALEFREE: PITS'

        config:
        - groupName: Data Vault
          items:
          - displayName: Dimension Key Column
            type: columnSelector
            attributeName: is_dimension_key
            isRequired: true

          - displayName: Clean Up PIT
            type: toggleButton
            attributeName: cleanup_pit
            default: true
      templates:
        create:
          templateString: |-
            {{ stage('Create PIT Table') }}

            {%- set ns = namespace(sdts_datatype = '') %}

            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            (
            	{% for col in columns %}
            		"{{ col.name }}" {{ col.dataType }}
            		{%- if not col.nullable %} NOT NULL
            			{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            		{% endif %}
            		{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            		{%- if not loop.last -%}, {% endif %}
            	{% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
        run:
          templateString: |-
            {% if config.preSQL %}
            	{{ stage('Pre-SQL') }}
            	{{ config.preSQL }}
            {% endif %}

            {{ stage('Insert New Rows') }}

            {%- set loc = storageLocations | selectattr('name', "eq", node.location.name) | list | first -%}
            {%- set target_database = loc.database -%}
            {%- set target_schema = loc.name -%}
            {%- set target_node = node.name -%}

            {%- set ns = namespace(sdts_node_name='', hub_node_name='') -%}

            INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            WITH records_to_insert AS (
            	SELECT
            	{% for col in sources[0].columns %}

            		{% if 'column' in col.sourceColumns[0].keys() -%}

            			{%- set source_node_name = col.sourceColumns[0].node.name -%}
            			{%- set source_column_name = col.sourceColumns[0].column.name -%}
            			{%- set target_column_name = col.name -%}

            			{%- if col.sourceColumns[0].column.is_Hub_hk -%}
                            {%- set ns.hub_node_name = source_node_name -%}
            				COALESCE("{{ source_node_name }}"."{{ target_column_name }}", {{ datavault4coalesce__unknown_key() }}) AS "{{ target_column_name }}"
            			{%- elif col.sourceColumns[0].column.is_hk -%}
            				COALESCE("{{ source_node_name }}"."{{ source_column_name }}", {{ datavault4coalesce__unknown_key() }}) AS "{{ target_column_name }}"			
            			{%- elif source_column_name == datavault4coalesce.config.ldts_alias -%}
            				COALESCE("{{ source_node_name }}"."{{ source_column_name }}", {{ datavault4coalesce__string_to_timestamp(datavault4coalesce.config.timestamp_format, datavault4coalesce.config.beginning_of_all_times) }}) AS "{{ target_column_name }}"
            			{%- elif col.name == datavault4coalesce.config.sdts_alias -%}
            				"{{ source_node_name }}"."{{ target_column_name }}" AS "{{ target_column_name }}"

                            {%- set ns.sdts_node_name = col.sourceColumns[0].node.name -%}

            			{%- else -%}
            				"{{ source_node_name }}"."{{ source_column_name }}" AS "{{ target_column_name }}"
            			{%- endif %}

            		{%- if not loop.last -%} , {% endif %}
            		{%- elif col.is_dimension_key -%}
            			{{ get_source_transform(col) }} AS "{{ col.name }}",
            		{%- endif %}

                {% endfor %}

            	FROM {{ ref(target_schema, ns.hub_node_name) }} "{{ ns.hub_node_name }}"

            	{% for col in sources[0].columns -%}
            		{%- if col.name == datavault4coalesce.config.sdts_alias -%}

                        {%- set source_node_name = col.sourceColumns[0].node.name -%}
            			{%- set source_node_schema = col.sourceColumns[0].node.location.name -%}

            			JOIN {{ ref(source_node_schema, source_node_name) }} "{{ source_node_name }}"
            			ON "{{ source_node_name }}"."{{ datavault4coalesce.config.snapshot_trigger_column }}" = true
            		{%- endif -%}
            	{% endfor %}

            	{%- for col in sources[0].columns %}
            		
            		{%- if 'column' in col.sourceColumns[0].keys() %}
            			{%- if col.sourceColumns[0].column.is_hk and not loop.first %}

                            {%- set source_node_name = col.sourceColumns[0].node.name -%}
            				{%- set source_node_schema = col.sourceColumns[0].node.location.name -%}
                            {%- set source_column_name = col.sourceColumns[0].column.name -%}
                            {%- set target_node = node.name -%}

            				LEFT JOIN {{ ref(source_node_schema, source_node_name) }} "{{ source_node_name }}"
            				ON "{{ ns.hub_node_name }}"."{{ source_column_name }}" = "{{ source_node_name }}"."{{ source_column_name }}"
            				
                            {% for sdts_col in sources[0].columns %}

            					{%- if sdts_col.name == datavault4coalesce.config.sdts_alias -%}
            						AND "{{ ns.sdts_node_name }}"."{{ sdts_col.name}}" BETWEEN "{{ source_node_name }}"."{{ datavault4coalesce.config.ldts_alias }}" and "{{ source_node_name }}"."{{ datavault4coalesce.config.ledts_alias }}"
            					{%- endif -%}
            				{%- endfor -%}
            			
            			{% endif %}
            		{%- endif %}
            	{% endfor -%}
            )

            SELECT * FROM records_to_insert
            WHERE "{{ get_value_by_column_attribute('is_dimension_key') }}" NOT IN 
            (
            	SELECT "{{ get_value_by_column_attribute('is_dimension_key') }}" FROM 
            	{{ ref_no_link(node.location.name, node.name) }}
            )


            {% if config.cleanup_pit %}

            {{ stage('Clean up PIT') }}

            	DELETE FROM {{ ref_no_link(node.location.name, node.name) }}
            	WHERE "{{ datavault4coalesce.config.sdts_alias }}" NOT IN (
                SELECT "{{ datavault4coalesce.config.sdts_alias }}" FROM 
                {% for col in sources[0].columns %}
                    {%- if col.name == datavault4coalesce.config.sdts_alias -%}
                        {%- set snapshot_loc = storageLocations | selectattr('name', "eq", col.sourceColumns[0].node.location.name) | list | first -%}
                        {%- set snapshot_node_name = col.sourceColumns[0].node.name -%}
                        "{{ snapshot_loc.database }}"."{{ snapshot_loc.schema }}"."{{ snapshot_node_name }}"
                    {%- endif -%}
                {%- endfor %}
                WHERE "{{ datavault4coalesce.config.snapshot_trigger_column }}" = true
            		)
            {% endif %}

            {% if config.postSQL %}
            	{{ stage('Post-SQL') }}
            	{{ config.postSQL }}
            {% endif %}
    name: "Datavault by Scalefree: PIT"
    packageInfo:
      id: SCALEFREE-DATAVAULT4COALESCE
      version: https://github.com/ScalefreeCOM/datavault4coalesce.git#main
    version: 1
  StepType-SCALEFREE-DATAVAULT4COALESCE::13:
    id: SCALEFREE-DATAVAULT4COALESCE::13
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: 'DATAVAULT BY SCALEFREE: SNAPSHOT V0'
        short: 'SNAPSHOTV0'
        plural: 'DATAVAULT BY SCALEFREE: SNAPSHOTS V0'
        tagColor: '#1E8449'

        config:
        - groupName: Data Vault
          items:
          - displayName: Snapshot Start Date (yyyy-mm-dd)
            type: textBox
            attributeName: input_snapshot_start_date
            isRequired: true
            default: "2020-01-01"

          - displayName: Snapshot End Date (yyyy-mm-dd)
            type: textBox
            attributeName: input_snapshot_end_date
            isRequired: true
            default: "2025-12-31"

          - displayName: Daily Snapshot Time (hh:mm:ss)
            type: textBox
            attributeName: input_daily_snapshot_time
            isRequired: true
            default: "07:00:00"

          - type: materializationSelector
            default: table
            options:
            - table
            isRequired: true
            enableIf: "false"     

        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false


        systemColumns:
        - displayName: "SDTS"
          transform: ""
          dataType: TIMESTAMP
          placement: end
          attributeName: system_sdts

        - displayName: "FORCE_ACTIVE"
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_force_active

        - displayName: "REPLACEMENT_SDTS"
          transform: ""
          dataType: TIMESTAMP
          placement: end
          attributeName: system_replacement_sdts

        - displayName: "CAPTION"
          transform: ""
          dataType: STRING
          placement: end
          attributeName: system_caption

        - displayName: "IS_HOURLY"
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_hourly

        - displayName: "IS_DAILY"
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_daily

        - displayName: "IS_BEGINNING_OF_WEEK"
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_beginning_of_week

        - displayName: "IS_BEGINNING_OF_MONTH"
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_beginning_of_month

        - displayName: "IS_BEGINNING_OF_QUARTER"
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_beginning_of_quarter

        - displayName: "IS_BEGINNING_OF_YEAR"
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_beginning_of_year
      templates:
        create:
          templateString: |-
            {{ stage('Create Snapshot v0 Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
        run:
          templateString: |-
            {{ stage('Insert New Rows') }}

            {%- set timestamp_format = datavault4coalesce.config.timestamp_format -%}
            {%- set start_date = config.input_snapshot_start_date -%}
            {%- set end_date = config.input_snapshot_end_date -%}
            {%- set daily_snapshot_time = config.input_daily_snapshot_time -%}

            INSERT INTO {{ ref_no_link(node.location.name, node.name) }}

            WITH "date_base" AS (
                SELECT
                    "sdts" as "{{ datavault4coalesce.config.sdts_alias }}",
                    TRUE as "force_active",
                    "sdts" AS "replacement_sdts",
                    CONCAT('Snapshot ', DATE("sdts")) AS "caption",
                    CASE
                        WHEN EXTRACT(MINUTE FROM "sdts") = 0 AND EXTRACT(SECOND FROM "sdts") = 0 THEN TRUE
                        ELSE FALSE
                    END AS "is_hourly",
                    CASE
                        WHEN EXTRACT(HOUR FROM "sdts") = 0 AND EXTRACT(MINUTE FROM "sdts") = 0 AND EXTRACT(SECOND FROM "sdts") = 0 THEN TRUE
                        ELSE FALSE
                    END AS "is_daily",
                    CASE
                        WHEN EXTRACT(DAYOFWEEK FROM  "sdts") = 1 THEN TRUE
                        ELSE FALSE
                    END AS "is_beginning_of_week",
                    CASE
                        WHEN EXTRACT(DAY FROM "sdts") = 1 THEN TRUE
                        ELSE FALSE
                    END AS "is_beginning_of_month",
                    CASE
                        WHEN EXTRACT(DAY FROM "sdts") = 1 AND EXTRACT(MONTH FROM "sdts") in (1, 4, 7, 10) THEN TRUE
                        ELSE FALSE
                    END AS "is_beginning_of_quarter",  
                    CASE
                        WHEN EXTRACT(DAY FROM "sdts") = 1 AND EXTRACT(MONTH FROM "sdts") = 1 THEN TRUE
                        ELSE FALSE
                    END AS "is_beginning_of_year"
                FROM 
                (
                    SELECT
                        DATEADD(DAY, SEQ4(), 
                        TIMESTAMPADD(SECOND, EXTRACT(SECOND FROM TO_TIME('{{ daily_snapshot_time }}')), 
                        TIMESTAMPADD(MINUTE, EXTRACT(MINUTE FROM TO_TIME('{{ daily_snapshot_time }}')), 
                        TIMESTAMPADD(HOUR, EXTRACT(HOUR FROM TO_TIME('{{ daily_snapshot_time }}')), TO_DATE('{{ start_date }}', 'YYYY-MM-DD')))
                        ))::TIMESTAMP AS "sdts"
                    FROM 
                        TABLE(GENERATOR(ROWCOUNT => 100000))
                    WHERE 
                        "sdts" <= TO_DATE('{{ end_date }}', 'YYYY-MM-DD')
                ) 
            ),

            "records_to_insert" AS (

                SELECT 
                    "date_base".*
                FROM "date_base"
                LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "tgt"
                    ON "date_base"."{{ datavault4coalesce.config.sdts_alias }}" = "tgt"."{{ datavault4coalesce.config.sdts_alias }}"
                WHERE "tgt"."{{ datavault4coalesce.config.sdts_alias }}" IS NULL

            )

            SELECT * FROM "records_to_insert"

            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
    name: "Datavault by Scalefree: Snapshot v0"
    packageInfo:
      id: SCALEFREE-DATAVAULT4COALESCE
      version: https://github.com/ScalefreeCOM/datavault4coalesce.git#main
    version: 1
  StepType-SCALEFREE-DATAVAULT4COALESCE::14:
    id: SCALEFREE-DATAVAULT4COALESCE::14
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: 'DATAVAULT BY SCALEFREE: SNAPSHOT V1'
        short: 'SNAPSHOTV1'
        plural: 'DATAVAULT BY SCALEFREE: SNAPSHOTS V1'
        tagColor: '#58D68D'

        config:

        - groupName: Use Logarithmic Logic
          items:
          - displayName: Use Logarithmic Logic
            type: toggleButton
            attributeName: use_logarithmic_logic
            enableIf: 'true'
            isRequired: true
            default: true
          - type: materializationSelector
            default: view
            options:
            - view
            isRequired: true
            enableIf: "false"    

        - groupName: Daily Snapshot Logic
          enableIf: "{{ config.use_logarithmic_logic }}"
          items:
          - displayName: Keep Daily Snapshots forever
            type: toggleButton
            attributeName: daily_snapshots_forever
            enableIf: "{{ config.use_logarithmic_logic }}"
            isRequired: true
            default: false

          - displayName: Duration
            type: textBox
            attributeName: daily_snapshot_duration
            enableIf: "{% if not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: "30"

          - displayName: Time Unit
            type: dropdownSelector
            attributeName: daily_snapshot_unit
            enableIf: "{% if not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: DAY
            options:
            - DAY
            - WEEK
            - MONTH
            - QUARTER
            - YEAR
            
        - groupName: Weekly Snapshot Logic
          enableIf: "{% if config.use_logarithmic_logic and not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
          items:
          - displayName: Keep Weekly Snapshots forever
            type: toggleButton
            attributeName: weekly_snapshots_forever
            enableIf: "{% if config.use_logarithmic_logic and not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: false

          - displayName: Duration
            type: textBox
            attributeName: weekly_snapshot_duration
            enableIf: "{% if not config.weekly_snapshots_forever and not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: "1"

          - displayName: Time Unit
            type: dropdownSelector
            attributeName: weekly_snapshot_unit
            enableIf: "{% if not config.weekly_snapshots_forever and not config.daily_snapshots_forever %} true {% else %} false {% endif %}" 
            isRequired: true
            default: "YEAR"
            options:
            - DAY
            - WEEK
            - MONTH
            - QUARTER
            - YEAR   

        - groupName: Monthly Snapshot Logic
          enableIf: "{% if config.use_logarithmic_logic and not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
          items:
          - displayName: Keep Monthly Snapshots forever
            type: toggleButton
            attributeName: monthly_snapshots_forever
            enableIf: "{% if config.use_logarithmic_logic and not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: false

          - displayName: Duration
            type: textBox
            attributeName: monthly_snapshot_duration
            enableIf: "{% if not config.monthly_snapshots_forever and not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: "3"

          - displayName: Time Unit
            type: dropdownSelector
            attributeName: monthly_snapshot_unit
            enableIf: "{% if not config.monthly_snapshots_forever and not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: YEAR
            options:
            - DAY
            - WEEK
            - MONTH
            - QUARTER
            - YEAR

        - groupName: Quarterly Snapshot Logic
          enableIf: "{% if config.use_logarithmic_logic and not config.daily_snapshots_forever and not config.monthly_snapshots_forever %} true {% else %} false {% endif %}"
          items:
          - displayName: Keep Quarterly Snapshots forever
            type: toggleButton
            attributeName: quarterly_snapshots_forever
            enableIf: "{% if config.use_logarithmic_logic and not config.daily_snapshots_forever and not config.monthly_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: false

          - displayName: Duration
            type: textBox
            attributeName: quarterly_snapshot_duration
            enableIf: "{% if not config.quarterly_snapshots_forever and not config.daily_snapshots_forever and not config.monthly_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: "5"

          - displayName: Time Unit
            type: dropdownSelector
            attributeName: quarterly_snapshot_unit
            enableIf: "{% if not config.quarterly_snapshots_forever and not config.daily_snapshots_forever and not config.monthly_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: YEAR
            options:
            - DAY
            - WEEK
            - MONTH
            - QUARTER
            - YEAR
            
        - groupName: Yearly Snapshot Logic
          enableIf: "{% if config.use_logarithmic_logic and not config.quarterly_snapshots_forever and not config.monthly_snapshots_forever and not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
          items:
          - displayName: Keep Yearly Snapshots forever
            type: toggleButton
            attributeName: yearly_snapshots_forever
            enableIf: "{% if config.use_logarithmic_logic and not config.quarterly_snapshots_forever and not config.monthly_snapshots_forever and not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: false

          - displayName: Duration
            type: textBox
            attributeName: yearly_snapshot_duration
            enableIf: "{% if not config.yearly_snapshots_forever and not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: "10"

          - displayName: Time Unit
            type: dropdownSelector
            attributeName: yearly_snapshot_unit
            enableIf: "{% if not config.yearly_snapshots_forever and not config.daily_snapshots_forever %} true {% else %} false {% endif %}" 
            isRequired: true
            default: YEAR
            options:
            - DAY
            - WEEK
            - MONTH
            - QUARTER
            - YEAR  

        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false


        systemColumns:
        - displayName: IS_ACTIVE
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_active

        - displayName: IS_LATEST
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_latest

        - displayName: IS_CURRENT_YEAR
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_current_year

        - displayName: IS_LAST_YEAR
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_last_year

        - displayName: IS_ROLLING_YEAR
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_rolling_year

        - displayName: IS_LAST_ROLLING_YEAR
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_last_rolling_year
      templates:
        create:
          templateString: |-
            {{ stage('Create Snapshot v1 View') }}

            {% if config.use_logarithmic_logic %}
                {%-set log_logic = {
                'daily':        {'duration': config.daily_snapshot_duration|int,
                                'unit': '{{config.daily_snapshot_unit}}',
                                'forever': '{{config.daily_snapshots_forever}}'},
                'weekly':       {'duration': config.weekly_snapshot_duration|int,
                                'unit': '{{config.weekly_snapshot_unit}}',
                                'forever': '{{config.weekly_snapshots_forever}}'},
                'monthly':      {'duration': config.monthly_snapshot_duration|int,
                                'unit': '{{config.monthly_snapshot_unit}}',
                                'forever': '{{config.monthly_snapshots_forever}}'},
                'quarterly':    {'duration': config.quarterly_snapshot_duration|int,
                                'unit': '{{config.quarterly_snapshot_unit}}',
                                'forever': '{{config.quarterly_snapshots_forever}}'},
                'yearly':       {'duration': config.yearly_snapshot_duration|int,
                                'unit': '{{config.yearly_snapshot_unit}}',
                                'forever': '{{config.yearly_snapshots_forever}}'},
                    } 
                %}
            {% else %}
                {% set log_logic = none %}
            {% endif %}

            {% set sdts_alias = datavault4coalesce.config.sdts_alias %}
            {% set ns = namespace(forever_status=FALSE) %}
            {% set snapshot_trigger_column = 'IS_ACTIVE' %}


            CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            (
                {% for col in columns %}
            		"{{ col.name }}"
            		{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            		{%- if not loop.last -%}, {% endif %}
            	{% endfor %}
            )
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

            AS
            WITH latest_row AS (

                SELECT
                    "{{ sdts_alias }}"
                FROM {{ ref(sources[0].columns[0].sourceColumns[0].node.location.name, sources[0].columns[0].sourceColumns[0].node.name) }}
                WHERE "{{ sdts_alias }}" <= SYSDATE()
                ORDER BY "{{ sdts_alias }}" DESC
                LIMIT 1

            ), 

            virtual_logic AS (
                
                SELECT
                    c."{{ sdts_alias }}",
                    c."REPLACEMENT_SDTS",
                    c."FORCE_ACTIVE",
                    {%- if log_logic is none %}
                    TRUE AS {{ snapshot_trigger_column }},
                    {%- else %}
                    CASE 
                        WHEN
                        {% if 'daily' in log_logic.keys() %}
                            {%- if log_logic['daily']['forever'] is true -%}
                                {%- set ns.forever_status = 'TRUE' -%}
                              (1=1)
                            {%- else %}
                                {%- set daily_duration = log_logic['daily']['duration'] -%}
                                {%- set daily_unit = log_logic['daily']['unit'] -%}
                              (DATE_TRUNC('DAY', c."{{ sdts_alias }}"::DATE) BETWEEN SYSDATE() - INTERVAL '{{ daily_duration }} {{ daily_unit }}' AND SYSDATE())
                            {%- endif -%}   
                        {%- endif %}

                        {%- if 'weekly' in log_logic.keys() %} OR 
                            {%- if log_logic['weekly']['forever'] is true -%}
                                {%- set ns.forever_status = 'TRUE' -%}
                          (c."IS_BEGINNING_OF_WEEK" = TRUE)
                            {%- else %} 
                                {%- set weekly_duration = log_logic['weekly']['duration'] -%}
                                {%- set weekly_unit = log_logic['weekly']['unit'] %}            
                          ((DATE_TRUNC('DAY', c."{{ sdts_alias }}"::DATE) BETWEEN SYSDATE() - INTERVAL '{{ weekly_duration }} {{ weekly_unit }}' AND SYSDATE()) AND (c."IS_BEGINNING_OF_WEEK" = TRUE))
                            {%- endif -%}
                        {% endif -%}

                        {%- if 'monthly' in log_logic.keys() %} OR
                            {%- if log_logic['monthly']['forever'] is true -%}
                                {%- set ns.forever_status = 'TRUE' %}
                          (c."IS_BEGINNING_OF_MONTH" = TRUE)
                            {%- else %}
                                {%- set monthly_duration = log_logic['monthly']['duration'] -%}
                                {%- set monthly_unit = log_logic['monthly']['unit'] %}            
                          ((DATE_TRUNC('DAY', c."{{ sdts_alias }}"::DATE) BETWEEN SYSDATE() - INTERVAL '{{ monthly_duration }} {{ monthly_unit }}' AND SYSDATE()) AND (c."IS_BEGINNING_OF_MONTH" = TRUE))
                            {%- endif -%}
                        {% endif -%}

                        {%- if 'quarterly' in log_logic.keys() %} OR
                            {%- if log_logic['quarterly']['forever'] is true -%}
                                {%- set ns.forever_status = 'TRUE' %}
                          (c."IS_BEGINNING_OF_QUARTER" = TRUE)
                            {%- else %}
                                {%- set quarterly_duration = log_logic['quarterly']['duration'] -%}
                                {%- set quarterly_unit = log_logic['quarterly']['unit'] %}            
                          ((DATE_TRUNC('DAY', c."{{ sdts_alias }}"::DATE) BETWEEN SYSDATE() - INTERVAL '{{ quarterly_duration }} {{ quarterly_unit }}' AND SYSDATE()) AND (c."IS_BEGINNING_OF_QUARTER" = TRUE))
                            {%- endif -%}
                        {% endif -%}

                        {%- if 'yearly' in log_logic.keys() %} OR 
                            {%- if log_logic['yearly']['forever'] is true -%}
                                {%- set ns.forever_status = 'TRUE' %}
                          (c."IS_BEGINNING_OF_YEAR" = TRUE)
                            {%- else %}
                                {%- set yearly_duration = log_logic['yearly']['duration'] -%}
                                {%- set yearly_unit = log_logic['yearly']['unit'] %}                    
                          ((DATE_TRUNC('DAY', c."{{ sdts_alias }}"::DATE) BETWEEN SYSDATE() - INTERVAL '{{ yearly_duration }} {{ yearly_unit }}' AND SYSDATE()) AND (c."IS_BEGINNING_OF_YEAR" = TRUE))
                            {%- endif -%}
                        {% endif %}
                        THEN TRUE
                        ELSE FALSE
                    END AS {{ snapshot_trigger_column }},
                    {%- endif %}

                    CASE
                        WHEN l."{{ sdts_alias }}" IS NULL THEN FALSE
                        ELSE TRUE
                    END AS "IS_LATEST",

                    c."CAPTION",
                    c."IS_HOURLY",
                    c."IS_DAILY",
                    c."IS_BEGINNING_OF_WEEK",
                    c."IS_BEGINNING_OF_MONTH",
                    c."IS_BEGINNING_OF_QUARTER",
                    c."IS_BEGINNING_OF_YEAR",
                    CASE
                        WHEN EXTRACT(YEAR FROM c."{{ sdts_alias }}") = EXTRACT(YEAR FROM SYSDATE()) THEN TRUE
                        ELSE FALSE
                    END AS "IS_CURRENT_YEAR",
                    CASE
                        WHEN EXTRACT(YEAR FROM c."{{ sdts_alias }}") = EXTRACT(YEAR FROM SYSDATE())-1 THEN TRUE
                        ELSE FALSE
                    END AS "IS_LAST_YEAR",
                    CASE
                        WHEN DATE_TRUNC('DAY', c."{{ sdts_alias }}"::DATE) BETWEEN (SYSDATE() - INTERVAL '1 YEAR') AND SYSDATE() THEN TRUE
                        ELSE FALSE
                    END AS "IS_ROLLING_YEAR",
                    CASE
                        WHEN DATE_TRUNC('DAY', c."{{ sdts_alias }}"::DATE) BETWEEN (SYSDATE() - INTERVAL '2 YEAR') AND (SYSDATE() - INTERVAL '1 YEAR') THEN TRUE
                        ELSE FALSE
                    END AS "IS_LAST_ROLLING_YEAR"
                FROM {{ ref(sources[0].columns[0].sourceColumns[0].node.location.name, sources[0].columns[0].sourceColumns[0].node.name) }} c
                LEFT JOIN latest_row l
                ON c."{{ sdts_alias }}" = l."{{ sdts_alias }}"
                WHERE c."{{ sdts_alias }}" < SYSDATE()
            ),

            active_logic_combined AS (

                SELECT 
                    "{{ sdts_alias }}",
                    "FORCE_ACTIVE",
                    "REPLACEMENT_SDTS",
                    "CAPTION",
                    "IS_HOURLY",
                    "IS_DAILY",
                    "IS_BEGINNING_OF_WEEK",
                    "IS_BEGINNING_OF_MONTH",
                    "IS_BEGINNING_OF_QUARTER",
                    "IS_BEGINNING_OF_YEAR",
                    CASE
                        WHEN "FORCE_ACTIVE" AND {{ snapshot_trigger_column }} THEN TRUE
                        WHEN NOT "FORCE_ACTIVE" OR NOT {{ snapshot_trigger_column }} THEN FALSE
                    END AS "{{ snapshot_trigger_column }}",
                    "IS_LATEST",         
                    "IS_CURRENT_YEAR",
                    "IS_LAST_YEAR",
                    "IS_ROLLING_YEAR",
                    "IS_LAST_ROLLING_YEAR"
                FROM virtual_logic
                ORDER BY "{{ sdts_alias }}" DESC
            )

            SELECT * FROM active_logic_combined
        run:
          templateString: ""
    name: "Datavault by Scalefree: Snapshot v1"
    packageInfo:
      id: SCALEFREE-DATAVAULT4COALESCE
      version: https://github.com/ScalefreeCOM/datavault4coalesce.git#main
    version: 1
  StepType-SCALEFREE-DATAVAULT4COALESCE::4:
    id: SCALEFREE-DATAVAULT4COALESCE::4
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGING
      error: null
      nodeMetadataSpec: |+
        capitalized: 'DATAVAULT BY SCALEFREE: STAGE'
        short: DVSTG
        plural: 'DATAVAULT BY SCALEFREE: STAGES'
        tagColor: '#AED6F1'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: view
            options:
            - view
            isRequired: true
            enableIf: "false"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true

        - groupName: Data Vault
          items:
          - displayName: Generate Ghost Records
            attributeName: generate_ghost_records
            type: toggleButton
            default: true

        systemColumns:
        - displayName: "LDTS"
          transform: SYSDATE()
          dataType: TIMESTAMP
          placement: end
          attributeName: is_system_ldts    
          description: "The Load Date Timestamp (LDTS) describes when this data first arrived in the Data Warehouse."
        - displayName: "RSRC"
          transform: "{{record_source()}}"
          dataType: STRING
          placement: end
          attributeName: is_system_rsrc    
          description: "The Record Source (RSRC) describes the source of this data." 
        - displayName: "TABLE_NAME"
          transform: "{{prev_table_name|replace('load_', '')}}"
          dataType: STRING
          placement: start
          attributeName: table_name


      templates:
        create:
          templateString: |-
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}

            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        {%- if col.is_rsrc_column -%}
                            "{{datavault4coalesce.config.rsrc_alias}}"
                        {%- elif col.is_ldts_column -%}
                            "{{datavault4coalesce.config.ldts_alias}}"
                        {% else %}
                            "{{ col.name }}"
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {% if col.hashDetails %}
                            {{ datavault4coalesce__hash(columns=col.hashDetails.columns, datatype=col.dataType, algo=col.hashDetails.algorithm) }} AS "{{ col.name }}"
                        {% else %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}

                    {%- if config.generate_ghost_records -%}

                        UNION ALL 

                        SELECT

                        {% for source in sources %}
                            {% for col in source.columns %}
                                {%- if "hashDetails" in col.keys() %}
                                    {{ datavault4coalesce__ghost_record_per_datatype(col.name, col.dataType, 'unknown', hash=true, hash_algo=col.hashDetails.algorithm) }}
                                {%- else -%}
                                    {{ datavault4coalesce__ghost_record_per_datatype(col.name, col.dataType, 'unknown', hash=false) }}
                                {%- endif -%}
                            {% if not loop.last %},{% endif %}
                            {% endfor %}
                        {% endfor %}

                        UNION ALL 

                        SELECT

                        {% for source in sources %}
                            {% for col in source.columns %}
                                {%- if "hashDetails" in col.keys() %}
                                    {{ datavault4coalesce__ghost_record_per_datatype(col.name, col.dataType, 'error', hash=true, hash_algo=col.hashDetails.algorithm) }}
                                {%- else -%}
                                    {{ datavault4coalesce__ghost_record_per_datatype(col.name, col.dataType, 'error', hash=false) }}
                                {%- endif -%}
                            {% if not loop.last %},{% endif %}
                            {% endfor %}
                        {% endfor %}

                    {%- endif -%}

                {% endfor %}

            {% endif %}
        run:
          templateString: ""
    name: "Datavault by Scalefree: Stage"
    packageInfo:
      id: SCALEFREE-DATAVAULT4COALESCE
      version: https://github.com/ScalefreeCOM/datavault4coalesce.git#main
    version: 1
  StepType-SCALEFREE-DATAVAULT4COALESCE::6:
    id: SCALEFREE-DATAVAULT4COALESCE::6
    isDisabled: false
    metadata:
      defaultStorageLocation: TARGET
      error: null
      nodeMetadataSpec: |-
        capitalized: 'DATAVAULT BY SCALEFREE: HUB'
        short: 'HUB'
        tagColor: blue
        plural: 'DATAVAULT BY SCALEFREE: HUBS'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            enableIf: 'true'
            options: 
            - table
            default: table
         
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

          - type: multisourceToggle

        - groupName: Data Vault
          items:

          - displayName: Hub Hashkey Column
            type: columnSelector
            attributeName: is_Hub_hk
            isRequired: true

          - displayName: Hub LoadDateTimestamp Column
            enableIf: 'false'
            type: columnSelector
            attributeName: is_Hub_ldts
            isRequired: false
      templates:
        create:
          templateString: |
            {{ stage('Create Hub Table') }}

            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            (
            	{% for col in columns %}
            		"{{ col.name }}" {{ col.dataType }}
            		{%- if not col.nullable %} NOT NULL
            			{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            		{% endif %}
            		{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            		{%- if not loop.last -%}, {% endif %}
            	{% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
        run:
          templateString: |-
            {% if config.preSQL %}
            	{{ stage('Pre-SQL') }}
            	{{ config.preSQL }}
            {% endif %}

            {% for source in sources %}

            	{{ stage('INSERT INTO Hub - ' ~ source.name) }}

            	{%- set hashkey_column = get_value_by_column_attribute("is_Hub_hk") -%}

            	INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            	
            WITH incoming AS (

            	SELECT DISTINCT
            	{% for col in source.columns %}
            		{{ get_source_transform(col) }} AS "{{ col.name }}"
            		{%- if not loop.last -%}, {% endif %}
            	{% endfor %}

            	{{ source.join }}

            ), 

            new_records AS (

            	SELECT 
            	"SRC".* 
            	FROM incoming "SRC"
            	WHERE NOT EXISTS 

            	(SELECT 1 
            	FROM {{ ref_no_link(node.location.name, node.name) }} "TGT"
            	WHERE 
            		"SRC"."{{ hashkey_column }}" = "TGT"."{{ hashkey_column }}")

            	QUALIFY ROW_NUMBER() OVER (PARTITION BY "{{ hashkey_column }}" ORDER BY "{{ datavault4coalesce.config.ldts_alias }}" ) = 1
            )


            	SELECT * FROM new_records

            {% endfor %}

            {% if config.postSQL %}
            	{{ stage('Post-SQL') }}
            	{{ config.postSQL }}
            {% endif %}
    name: "Datavault by Scalefree: Hub"
    packageInfo:
      id: SCALEFREE-DATAVAULT4COALESCE
      version: https://github.com/ScalefreeCOM/datavault4coalesce.git#main
    version: 1
  StepType-SCALEFREE-DATAVAULT4COALESCE::7:
    id: SCALEFREE-DATAVAULT4COALESCE::7
    isDisabled: false
    metadata:
      defaultStorageLocation: TARGET
      error: null
      nodeMetadataSpec: |-
        capitalized: 'DATAVAULT BY SCALEFREE: LINK'
        short: 'LINK'
        tagColor: 'Red'
        plural: 'DATAVAULT BY SCALEFREE: LINKS'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            enableIf: 'false'
            default: table
            options:
            - table

          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false
            
          - type: multisourceToggle
          
        - groupName: Data Vault
          items:
          - displayName: Link Hashkey Column
            type: columnSelector
            attributeName: is_Link_hk
            isRequired: true 
      templates:
        create:
          templateString: |-
            {{ stage('Create Link Table') }}

            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            (
                {% for col in columns %}
                    "{{ col.name }}" {{ col.dataType }}
                    {%- if not col.nullable %} NOT NULL
                        {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                    {% endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
        run:
          templateString: |-
            {% if config.preSQL %}
                {{ stage('Pre-SQL') }}
                {{ config.preSQL }}

            {% endif %}

            {% for source in sources %}
                        
                {{ stage('INSERT INTO Link - ' ~ source.name) }}

                {%- set link_hashkey = get_value_by_column_attribute("is_Link_hk") -%}

                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}

            WITH incoming AS 
                (
                    SELECT DISTINCT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}
                ),

            new_records AS (
                SELECT
                    "SRC".*
                FROM incoming "SRC"
                WHERE NOT EXISTS (
                    SELECT
                        1
                    FROM {{ ref_no_link(node.location.name, node.name) }} "TGT"
                    WHERE "SRC"."{{ link_hashkey }}" = "TGT"."{{ link_hashkey }}"
                )
                QUALIFY ROW_NUMBER() OVER (PARTITION BY "{{ link_hashkey }}" ORDER BY "{{ datavault4coalesce.config.ldts_alias }}" ) = 1
            )

            SELECT * FROM new_records

            {% endfor %}

            {% if config.postSQL %}
                {{ stage('Post-SQL') }}
                {{ config.postSQL }}    
            {% endif %}
    name: "Datavault by Scalefree: Link"
    packageInfo:
      id: SCALEFREE-DATAVAULT4COALESCE
      version: https://github.com/ScalefreeCOM/datavault4coalesce.git#main
    version: 1
  StepType-SCALEFREE-DATAVAULT4COALESCE::8:
    id: SCALEFREE-DATAVAULT4COALESCE::8
    isDisabled: false
    metadata:
      defaultStorageLocation: TARGET
      error: null
      nodeMetadataSpec: |-
        capitalized: 'DATAVAULT BY SCALEFREE: SATELLITE V0'
        short: 'SATV0'
        plural: 'DATAVAULT BY SCALEFREE: SATELLITES V0'
        tagColor: 'Yellow'

        config:
        - groupName: Data Vault
          items:
          - displayName: Hashkey Column
            type: columnSelector
            attributeName: is_hk
            isRequired: true

          - displayName: Hashdiff Column
            type: columnSelector
            attributeName: is_hd
            isRequired: true

        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false
      templates:
        create:
          templateString: |
            {{ stage('Create Satellite Table') }}

            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            (
            	{% for col in columns %}
            		"{{ col.name }}" {{ col.dataType }}
            		{%- if not col.nullable %} NOT NULL
            			{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            		{% endif %}
            		{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            		{%- if not loop.last -%}, {% endif %}
            	{% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
        run:
          templateString: |-
            {% if config.preSQL %}
            	{{ stage('Pre-SQL') }}
            	{{ config.preSQL }}
            {% endif %}

            {{ stage('Insert New Rows') }}
            INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            WITH latest_entries_in_sat AS (
            	/* get current rows from satellite */
            	{% for col in columns if col.is_hk or col.is_hd %}
            		{%- if loop.first -%}SELECT {% endif %} 
            		"{{col.name}}"
            		{%- if not loop.last -%}, {% endif %}
            		{%- if loop.last %} 
            			FROM {{ ref_no_link(node.location.name, node.name) }} 
            			QUALIFY ROW_NUMBER() OVER (PARTITION BY "{{ get_value_by_column_attribute("is_hk") }}" ORDER BY "{{ datavault4coalesce.config.ldts_alias }}" DESC) = 1
            		{% endif %}
            	{% endfor %}
            ),

            deduplicated_numbered_source AS (
                
                {% for source in sources %}

                    SELECT
            		{% for col in source.columns %}
            			{{ get_source_transform(col) }} AS {{ col.name }},
            		{% endfor %}
                    ROW_NUMBER() OVER(PARTITION BY "{{ get_value_by_column_attribute("is_hk") }}" ORDER BY "{{ datavault4coalesce.config.ldts_alias }}") as rn
                    
                    {{ source.join }}
                    QUALIFY
                    CASE
                        WHEN "{{ get_value_by_column_attribute("is_hd") }}" = LAG("{{ get_value_by_column_attribute("is_hd") }}") OVER(PARTITION BY "{{ get_value_by_column_attribute("is_hk") }}" ORDER BY "{{ datavault4coalesce.config.ldts_alias }}" ) THEN FALSE
                        ELSE TRUE
                    END

                {% endfor %}

            )

            	{% for source in sources %}
            		SELECT DISTINCT
            		{% for col in source.columns %}
            			{{ col.name }}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		FROM deduplicated_numbered_source
            	WHERE NOT EXISTS (
            		SELECT 1 FROM latest_entries_in_sat
            		WHERE 
            		{% for col in source.columns if col.is_hk or col.is_hd %}
            			{% if not loop.first %}
            				AND
            			{% endif %}
            			deduplicated_numbered_source.{{ col.name }} = latest_entries_in_sat."{{ col.name }}"
            		{% endfor %}
                    AND deduplicated_numbered_source.rn = 1
            	)

            	{% endfor %}

            {% if config.postSQL %}
            	{{ stage('Post-SQL') }}
            	{{ config.postSQL }}
            {% endif %}
    name: "Datavault by Scalefree: Satellite v0"
    packageInfo:
      id: SCALEFREE-DATAVAULT4COALESCE
      version: https://github.com/ScalefreeCOM/datavault4coalesce.git#main
    version: 1
  StepType-SCALEFREE-DATAVAULT4COALESCE::9:
    id: SCALEFREE-DATAVAULT4COALESCE::9
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: 'DATAVAULT BY SCALEFREE: SATELLITE V1'
        short: 'SATV1'
        plural: 'DATAVAULT BY SCALEFREE: SATELLITES V1'
        tagColor: '#FFAC1C'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            enableIf: 'true'
            default: view
            options:
            - view

        - groupName: Data Vault
          items:
          - displayName: Hashkey Column
            type: columnSelector
            attributeName: is_hk
            isRequired: true

        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

        systemColumns:
        - displayName: "LEDTS"
          transform: |-
            COALESCE(LEAD("{{ datavault4coalesce.config.ldts_alias }}" - INTERVAL '1 MICROSECOND') 
            OVER (PARTITION BY "{{ get_value_by_column_attribute("is_hk") }}" 
            ORDER BY "{{ datavault4coalesce.config.ldts_alias }}"), {{ datavault4coalesce__string_to_timestamp(datavault4coalesce.config.timestamp_format, datavault4coalesce.config.end_of_all_times) }})
          dataType: TIMESTAMP
          placement: end
          attributeName: is_system_ledts
        - displayName: "IS_CURRENT"
          transform: |-
            CASE 
              WHEN 
                LEAD("{{ datavault4coalesce.config.ldts_alias }}" - INTERVAL '1 MICROSECOND') 
                OVER (PARTITION BY "{{ get_value_by_column_attribute("is_hk") }}" 
                ORDER BY "{{ datavault4coalesce.config.ldts_alias }}") IS NULL 
              THEN TRUE 
              ELSE FALSE 
            END
          dataType: BOOLEAN
          placement: end
          attributeName: is_system_current_col
      templates:
        create:
          templateString: |-
            {{ stage('Create Satellite View') }}

            CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            (
                {% for col in columns %}
                   "{{ col.name }}"
            		{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

            AS
            {% for source in sources %}
                SELECT
                {% for col in source.columns %}
                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
                {{ source.join }}
            {% endfor %}
        run:
          templateString: ""
    name: "Datavault by Scalefree: Satellite v1"
    packageInfo:
      id: SCALEFREE-DATAVAULT4COALESCE
      version: https://github.com/ScalefreeCOM/datavault4coalesce.git#main
    version: 1
  StepType-Satellite:
    id: Satellite
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Satellite
        short: 'SAT'
        plural: 'Satellites'
        tagColor: '#627DE9'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Satellite Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            		{% if config.preSQL %}
            			{{ stage('Pre-SQL') }}
            			{{ config.preSQL }}
            		{% endif %}
            	
            		{{ stage('Merge Satellite') }}
            		MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            		(
            			{% for source in sources %}
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if not loop.last %}
            				{{ config.insertStrategy }}
            			{% endif %}
            		{% endfor %}
            		)
            		AS "SRC"
            		ON
            		{% for col in sources[0].columns if (col.sourceColumns[0] 
                                                        and col.sourceColumns[0].column 
                                                        and col.sourceColumns[0].column.isChangeHash
                                                        ) -%}
            			{% if not loop.first %}
            				AND
            			{% endif %}
            			"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            		{% endfor %}
            		WHEN NOT MATCHED THEN
            		INSERT
            		(
            			{% for col in columns %}
            				"{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            		) VALUES
            		(
            			{% for col in columns %}
            				"SRC"."{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            		)
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}	
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
            			
    name: Satellite
    version: 1
  StepType-Source:
    id: Source
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Source
        short: null
        tagColor: '#D26000'
        plural: Sources
      templates:
        create:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
        run:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
    name: Source
    version: 1
  StepType-Stage:
    id: Stage
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGING
      error: null
      nodeMetadataSpec: |
        capitalized: Stage
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |2

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Stage
    version: 1
  StepType-View:
    id: View
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: View
        short: V
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: View
    version: 1
  StepType-persistentStage:
    id: persistentStage
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Persistent Stage
        short: PSTG
        plural: Persistent Stages
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create Persistent Stage Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Persistent Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

            {% endif %}
        run:
          templateString: |-

            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if has_business_key and is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}

                {% elif has_business_key and not is_type_2 %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% else %}
                    {% for source in sources %}
                        {{ stage('Insert ' + source.name | string ) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                        (
                            {% for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {%- if not loop.last -%},{% endif %}
                            {% endfor %}
                        )

                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}

                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                            
                        {% endfor %}
                        {{ source.join }}
                    {% endfor %}            
                {% endif %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Persistent Stage
    version: 1
subgraphs:
  Subgraph-1:
    id: "1"
    name: ADVENTURE_WORKS
    steps:
      - dedddbcc-0311-46aa-96a3-4c66fb3a2357
      - 7390ac2f-563d-40e9-84c3-e4287a81233c
      - 86a5e84a-b4e4-4b29-b56d-2a852f3d7583
      - 92ba28c8-3dad-44aa-9810-13936cebdd12
      - d3d7d819-cc93-448d-979a-9db1826c222a
      - 7e1ce90a-fb27-4dbb-b7d4-c089bde82d98
      - 071aa48d-33a3-42a1-8e55-a2947afb4d4c
      - f6359f3c-fa09-4cdc-ab32-d5f3d2440475
      - 806b1dec-e262-4707-bf1d-77793bc7423a
      - 25618659-ef3e-4d99-878c-80aae7729749
      - c7ba6bae-67eb-4bc8-838c-deced28068c3
      - efebb44d-26b5-4995-9fe2-7f21615f784b
      - d9ee64a6-c76f-422f-a23e-50d8273c625b
      - 0e25d7a3-6403-4327-b34f-94c7d9d7b59f
      - 135d1291-c02a-4963-8e5d-077800d7edfe
      - 54cdd740-7bf8-4e5a-9160-4299dfe80956
      - e311125c-3104-4e1e-86de-24e0950dc472
      - d1f0ebbc-ec04-4d1a-8191-b2e7e96d094e
      - e7cc2779-5703-4224-9b55-e4b46eb5f47e
      - 79802b98-d66e-472d-9c6b-66b2a337980b
      - ddf3b6b1-76d8-4a8d-9d2e-741c494c4cef
      - 27d5ba09-cf4f-4ea2-886c-da3c3385a59b
      - b7118a43-5cd9-4dd3-9dbc-dd4752af1c17
      - 48942cc6-300c-4a79-a52c-46c55b3b21de
      - f943c8e2-c83f-401c-89c8-1ff6eb66a5c4
      - 2e707f63-eaba-4c9e-b0eb-93e8a9dcc1ad
      - 583a8527-dab9-467d-825b-594c5041d58b
      - fd1c55f4-52a6-40d7-b439-f09e9007fc38
      - a12178f8-77f4-4bae-b4e4-14fa06246e83
      - 2cf2df9e-5945-49ca-85f4-646f6ddf2c08
      - 29a503f7-15c2-40fa-9590-acff4f48af22
      - 54a83c65-90b7-483d-ae27-7ae1684d33ba
      - aa3824a2-33a4-4fca-8ad4-f586015c5cc4
      - d453065b-91f6-4257-aa0b-3d3ecb68c3ba
      - dc11a936-6e01-472c-bb90-fd3ed17e8807
      - 7efdb080-ed74-4c50-97d3-7bdeb957692f
      - 5c3183c0-729d-427c-a926-ff5b48092919
      - 225aad74-8a02-49ef-93be-edcd01d0f065
      - 3e3489dd-899a-42d6-8e86-b9968f4c4cd5
      - 8e7b56e9-3fc6-4217-b5a7-084aa13fa97f
      - 81150051-daaa-4cdf-bc68-fe66b3a0ab83
      - 876b0851-7ab1-4144-afc2-b820e5da1ba2
      - 239bdde1-0e2f-44d1-ae9d-45a4889855c3
      - 28ba5ede-fa6e-4d8d-aa71-88dd4f35c02c
      - 4bd37d48-ea93-4025-ad2d-af2e8d2f4bee
      - ab806a21-4e59-4471-ab9c-75fa0433f8b7
      - 4fd5de04-b4a2-4e3b-9cfc-17a562ce87f2
      - 34fec249-fbf4-4b49-b08a-cd0872dd5972
      - f839ec19-0806-49e9-a6f8-7d05ef886083
      - 741841d8-3af6-429d-951f-b68e1ff09cc8
      - 49b3c9a5-2b18-4295-a48f-aa536af09840
      - de530ecd-3824-4959-a2e0-75e7c6e554a6
      - 845ecd73-4582-464c-92c3-4881085ad0ad
      - 102230f2-c538-4fa0-8638-dc5199ebea42
      - ebc0b0f4-dfa8-463f-a733-d5f84c98527b
      - 63b5159e-3629-4715-9a24-e790f37312bb
      - 4ecb5ff9-d48e-4e30-a40e-ce1a691c3fde
      - a0c3cb1b-7ed2-4ed9-ae7e-dd03085527c5
      - bea872f2-a36f-4f94-b2aa-3d8bab7b83e5
      - 103de1a3-c528-44e2-8f62-53c7d5638632
      - 6c841bf1-c4e8-444f-9d92-353af1dda74c
      - cc77440b-b178-4fc5-b779-b0129f7221d2
      - 4eecef91-8669-4f85-b5c5-38cf342d30a8
      - e817ae95-b26f-476f-9890-ad323d31088e
      - 52454c81-9be3-41be-83c4-9fdf5d314c8e
      - edbf41d5-9f2d-4c1f-9cf9-1521453aeb77
      - 319e4905-c87c-47be-89a2-96742896ad20
      - 9b993024-0410-444b-8d06-cf50b0c9fa7d
      - 1fbcf690-b432-43db-a44d-c2b316634e70
      - 110709b8-a3b9-4cf0-a5a3-05700f07828d
      - 3d528c86-2fc6-4066-9426-937570eb3f58
      - ef9f239e-69c5-44c2-9b69-5a490c4bd897
      - 76614353-a7fd-4b7e-b3da-10b6b4ed0aeb
      - 8f63b73c-29d4-45cb-ba54-945662c671ce
      - a6df2281-fdab-4349-b037-bb7e8887670a
      - 27013c3a-00eb-4333-8097-86b45a0a2d8c
      - ce7b8ce3-34d4-4378-9db3-6d36cbcebfa4
      - 0218bcfe-5f2b-4985-b7d3-53142048541a
      - 03258ea2-f02e-4484-8231-ade6754367be
      - 099a2033-f391-41f9-817f-5cc9236aac85
      - 0f4788c3-842f-43d8-8dfc-d08810af08ad
      - 10d3878b-be72-4090-ae6c-7f353758de04
      - 12220650-d6b6-4063-885e-da849e366272
      - 13004847-1fa7-4f11-9cfc-28fd8fafec11
      - 139e4117-5177-4fa4-b2a0-079baa707469
      - 144db9f0-2fba-415b-86ab-377e839d8993
      - 15dcfaff-b654-47e6-a547-550033ca53ed
      - 206a67a5-5023-44fa-8951-97c07fef4686
      - 22557de4-83c6-4b87-bfb2-4699126ae766
      - 229fe3a6-5c42-4ab6-a1de-1ca9a6c0241a
      - 270d0d8e-568d-4fd3-8018-521f63a900e1
      - 2cf633c7-cdd2-4734-8d82-c2f20716935a
      - 2de9d446-2fe4-409b-9955-1a4e4fe28e24
      - 3215ee1c-9601-4213-88b3-85994ccc49fa
      - 33f7d0d6-c21a-4491-906f-003f902f0c0b
      - 34660f1b-0a23-4096-9eae-75315ac8ee57
      - 34976aa1-44ea-4543-bad6-fcb688c5b4a2
      - 39888188-26c9-4816-a22c-b34c32741bd5
      - 3cabfd0a-fa56-4f0c-8e03-4adeedafe927
      - 3dab7470-6c27-4f7a-a3b7-10ee618020a6
      - 3e7c765e-f435-4a33-83b9-dacd5caffe8a
      - 3f39385d-f60e-4027-ba7e-cc8e46194e00
      - 4596a119-4351-4db1-83b8-eebd2d2508e4
      - 4d696f37-1be5-4446-9717-18e7c877839c
      - 53061540-4410-45fc-bdc9-68a2c4c71ad9
      - 55d3d486-e965-4817-9d81-c722965419a5
      - 570eb8a3-c265-4a26-b39c-ea13cb17d887
      - 590289c1-95cd-4f62-a1e8-e06659ab98bc
      - 5a772a76-133d-41e0-93e7-fadeb2cb4b35
      - 66af7187-ab44-4dc8-861d-337afc030f1e
      - 6b66270d-b59d-4aac-8c25-33cc33d921fc
      - 70f0cdf6-7f03-44ff-b77e-1565d28d6fb8
      - 75301f6e-fbf4-44bb-b612-8c7d9a84450b
      - 7f4df18c-b787-4819-97e8-681f64a57028
      - 812d5c2d-10a4-459d-88d5-daf221d3d78c
      - 84f654d3-3a53-42f6-a720-42ebd92c0714
      - 86e8e016-decb-4530-987d-ee8049880334
      - 876a5b67-67fc-4c07-94ea-be6d320aac37
      - 8a09aa10-c627-42e7-8740-bf39e846490e
      - 8ca7acf7-be84-4e6c-a1e3-841eaed4d00c
      - 95ebf7d8-30d5-4c65-bd20-060d9144be16
      - 9f9049b3-a636-45d4-9890-2a208ee0ea44
      - a245e499-12b9-46be-886f-2f1351b5ff7c
      - a65f0868-2c02-4b12-9721-82a7c4955722
      - a7fe383f-7c2e-443c-bb04-dd368e4dce2b
      - abcadb59-777b-43d0-acac-015dff35cb69
      - adfbf459-5cf6-42b0-9c41-28f011b6d1a3
      - b832c1e3-328f-4191-b649-0b1e1a3a8aa5
      - bbda3863-ddc7-4ccc-bcd7-88bb006b3e74
      - c0c442c9-466b-495b-ad95-f9b9e3f08367
      - c6338d9b-7be2-4e21-9783-c0f673ce4826
      - cc7d4ccd-1d58-45c5-9b57-cd35925295ee
      - ce3aaa27-e765-4dba-a239-138b4e204dcc
      - cee3d2ac-6ac9-4b22-9327-6a4012001e38
      - d19e6a06-8738-4bab-83f0-32e546f0b016
      - e459d49a-35a5-44ef-8a53-bc54fdd2c919
      - ea0b7ffb-794a-4538-aee8-8bed3aecade9
      - ea440c7a-0d29-444e-9793-f2b2f7ed5c7b
      - eb7ccf0d-836f-48d7-aa89-245ba0d52413
      - edfdcead-0b60-415a-ab0e-7ce01176a474
      - ef68e7c0-0faf-4c8e-9aec-b218fbc8f719
      - efdfd2c5-e27f-45a6-b52e-a602ec7089b5
      - f2b7a9b4-f7c2-4a55-bd27-fd17de9223c9
      - f630f3e0-9df6-4f6b-8740-7fe4f4f23cd2
      - f78b9b04-6ed6-47cb-a646-3d71c3e10035
      - fd420096-64cc-4524-83c8-092b75bfe2d1
      - 873a82d7-adb0-41e7-a58d-dfe6773a9800
      - ad935e72-9f88-45ad-bc06-bbbfaa4b77ec
      - e139eff8-b145-443c-8d93-a8b137c4d587
      - 1592b5bf-f8df-43ed-b14d-94b44af32263
      - d458a041-5928-4b11-b5db-656777a73af1
      - b904c5fa-5279-47ba-a367-44ddcd804b12
      - 4dacb92d-d9fb-4e68-8370-7bdb6da2a2bf
      - 7893777a-d3fa-44e2-88f1-4e2e2105bb5d
      - 9238af43-1476-4e50-a365-5d919113ac89
      - b6d79ba4-a7fd-464f-959a-e3cdfed02b5b
      - 68d965e8-eaf5-44b4-a519-db6fde82fb1b
      - 7b957649-85dc-45b6-b801-396956b2296e
      - 655840fd-bb3e-4dee-a2b8-bbf7bb7814bc
      - 4ddc5996-eec0-4aae-897f-8e0e66f40734
      - 5d5adac5-d1d5-41ce-9b47-dcbb5c9d0bfa
      - f4b939be-6ae1-4af0-bc66-bb6c71ef4398
      - 7f062895-a7a4-42f2-af5d-304f0a8d6809
      - 662375e4-37cf-4f9e-bf67-025895066d4c
      - b5389d04-5c6d-4855-abae-0ee38d39bdc5
      - fa3247ac-de4c-4849-accf-0af057176db9
      - 5703a66c-63a7-4299-8657-97b0d7d237b3
      - a8275e94-bbc0-4da8-ac32-f962b53d9624
      - 4c3482aa-72e4-4dda-bcc4-bd96b458f3af
      - 2663bed9-6544-438f-b7d9-9360487d5b63
      - 1b84de54-0585-4e78-b8f7-57704631c71f
      - 69a33d0d-63b1-4649-8929-12a8064262b3
      - fdd2e6e2-5970-407f-b5d2-779cb06ca1f2
      - 9bf6af5e-2fee-43ac-8296-7d81d112c4a5
      - 2f323b17-73ce-42b6-962e-591bda59a59d
      - 3077971c-3ef8-4f2a-b820-1b7ce81d0cad
      - af1784bf-14d7-4bd7-9bda-c02c7c07b88b
      - b3c93195-30b1-4e85-9580-bafad643a524
      - 7715419f-e38b-4772-acdd-8931036d7173
      - 2dd1a458-04c2-4cb3-90d2-da38d4fe6250
      - 29420f13-ea2f-41e5-a4a2-f43ce9102e38
      - 4ea7305c-3b6b-48eb-b3de-d76cca2cc911
      - 0c5c5892-2a3b-4cdf-8b29-89144f889d10
      - 430ec959-708f-4e32-a545-c17083817d8b
      - 990385ed-d6db-4778-bb04-deeedb7f256e
      - 7ccc22b4-332f-4f65-af62-fe4b6f0f8d5c
      - f9799243-f2ab-4df5-a089-64ec16cd8637
      - 2490ea8d-5190-461c-a08a-6d30e7d356e7
      - 95e6ea09-e5c6-4e39-be63-6d83fbde4e94
      - f5444d15-0b55-49a6-9138-a698d44cec4a
      - 227ff730-eff0-4654-95a6-03321f5c393a
      - edb959a3-7d81-457c-8b53-45d6c316b4dc
      - 1595b2d9-71f2-482b-8243-ba4311f55fce
      - 8d3a779f-aa0a-4ee5-993a-096c77aadd2a
      - 8818fbc8-76ab-42e9-a1fd-a20f6d47a5ad
      - 9b2e2337-4499-49a8-ab6e-2f1c979f36eb
      - a425e1f1-2f65-42bc-8f0d-d3b7a2bd0d01
      - e9889726-f7e6-4421-9b4f-eb2f60d108f1
      - 510cd247-7039-4e67-9c80-79f0bf857588
      - 9185137a-d129-44df-a9d7-362146559390
      - da6801bb-716c-43e5-b824-ce4adce0a10f
      - 9d805a2c-bbf2-4311-8c22-919f9744d10c
      - 6813a284-bacc-4624-b242-3b70cd36e700
      - 0cd808ca-7e92-4e56-a7c0-e8349ae4e32a
      - 92aa53e9-7051-4759-bd47-7fb349e78234
      - 4da37f79-d51d-43c1-aa8b-c4529dceb21a
      - 8f478a9b-5a64-4836-a19a-8a7af69d8124
      - d50fb4a9-1368-4506-a9ab-3cb8b8452bea
      - 0bbfe10e-922a-4ff8-99c7-2fc0bf1bf169
      - fd85db53-956b-490c-99ce-eb7164281b69
      - c0955ab8-ffd2-4f04-b4c0-d633a65f26bd
      - 9ec0bea8-ebc1-4e17-8db6-ad5c6c6f49a3
      - f100186a-48df-4d7f-b80e-6752fab073a8
      - 448a62bc-4c36-4ad7-9856-a6c599aa5d82
      - a3b13605-ccb6-422f-8e2d-3ef872df5341
      - b2676b22-7168-43dc-89d6-49afbb8f20b2
      - 9ef06191-4ee8-460d-b6bd-df993ea72ead
      - 67a25364-9fbf-4e2d-9c18-7db56176b2e6
      - 1c6b4de0-db35-449c-a387-4c34364b7bf0
      - ba123129-39ec-4ba4-a7bd-a520284be084
      - 801cb70f-a263-442c-b5d3-d71ffc24c7f6
      - 7861a66e-c7b2-4c68-81e0-d472720b43e1
      - 8bf9c953-7925-4505-b790-f11e933704f7
      - 3123b88f-8144-4150-a610-b1508c3a9cb5
      - 6d4097ad-122a-4c26-8e5d-f759d8119897
      - a823c70b-536a-4058-893d-2af47f188f0f
      - 2cc969be-b5ad-4718-8ae6-98646420dd9d
      - c567e9ea-0e5a-4449-9f84-c55a4d7253de
      - df02545d-cf92-45cb-869e-447ffc32b3d4
      - 4cc8fbc1-f076-4d79-bb4b-f77b70853767
      - d52bb43b-07c2-416b-984a-860036b8058a
      - bb515251-16d0-4130-bbea-085fef4708fa
      - 722b49b0-e8ed-476b-b9fe-617872212904
      - 25cd4ebc-32f0-48bf-820a-c8fb4ac09971
      - dd22cff3-dd4d-4c8e-82d5-62457edd2c8e
      - a6efcb90-99e0-4134-a4ff-0022cef27e1d
      - 3cf82c24-cba2-4afe-95a2-70dd51af6e9e
      - baf16946-a2f2-49d3-b556-2cfe866ae684
      - 4977033a-8089-40e9-80ba-e8f408f0fbe2
      - 257488f3-5435-4223-8588-ca8b88ba18d0
      - 410ebbd8-c236-41d3-be3b-680b624e4cf9
      - 942cc1db-ec33-4d4b-b497-5d011561f3ff
      - eb6f4fc9-a7a8-419d-a094-13cf2dd2796f
      - 015369f7-63e1-4c35-bcd1-e3a411aca82a
      - cb8d4e7c-958d-4e53-9eab-e71942cd1ace
      - 7d8b3fea-06b1-4579-b40a-46e8ac3b8319
      - 43938d89-580c-45e6-a954-127e17521c56
      - f1536fa8-6907-4278-9203-94b41ccffb6b
      - 4e97aa17-f5a7-4e50-8945-e763f72d24fd
      - f5ecf50e-47b3-4d0b-a890-96ea36f7a5de
      - efe71a37-3559-4067-812b-147179bf635b
      - dda55f70-50c7-4139-9ba6-005305a2817c
      - 97a2905e-06c9-487b-9b1b-c91e153bf421
      - 0482c944-1237-416b-b93e-7037fac3a2a9
      - 40e43c3c-4335-428a-b113-cda62fea62c8
      - fb265c16-04f3-462e-907c-ee228a4aa70e
      - 0be9546b-5621-40c5-9c7a-cfcea0113efb
      - 7dbd6baf-cd1e-46f7-858b-003ddadeb5e2
      - bdf57cab-6ccb-4eae-975e-5a6b2fe94d9c
      - 37695bc5-ab87-4069-9103-0e451f9c43b5
      - 2980e59a-0e6c-49fa-b662-410b6d7657e2
      - f85c3151-7979-4ab2-836c-c2ef28fd00c2
      - b95df056-b73b-4934-aeaa-969a760aa07f
      - a5eec4e3-e2e0-4510-8509-496fe88eaa2b
      - 6b1e9cbd-88ba-48bd-9796-f8312908384c
      - 5682e609-6c13-491f-be2c-9c4bab56910a
      - 3b421336-e3b3-47ad-9f78-d58ad4f56882
      - 7d3a6fc6-cdc4-49c7-b79c-798d29072c6c
      - 19c238db-7071-4b52-a830-9e61666cf2ba
      - 0236a5e8-affd-4991-824d-bb5415dde19d
      - dc0ca6eb-e357-422e-a07c-1e2cc25cf095
      - 246e9013-9ecd-4762-8aab-3ef1b159e649
      - ee80830b-c4e8-4c93-a220-34cb17bb5a07
      - 66ac8fc8-6fd5-481d-b321-89e3d1db9731
      - dc5323ce-ebf2-48ee-8bba-1e0b3e46ac64
      - b724e6d8-35c0-44cb-95d5-5b9b3ee04e25
      - c678374b-2cf6-46b3-beec-3b1edc461296
      - 91dcd521-acd7-4bfa-af9d-8f30f7a20f4f
      - f51aff96-6a00-4c4c-b838-8233b6db7b67
      - 4808ac6f-cc54-4509-a97f-906ae9ff5a7d
      - cbd44b0c-edff-4d68-af7c-29c733863c35
      - 5aeb7a03-efbc-4115-a2d1-3ad65be5a358
      - 9bda1fa3-19b6-43e9-b5df-1aa293ccf224
      - 22f14b6c-db88-454a-97b1-9bc75e5d070f
      - ce54889b-a1a4-494a-b732-2e3caffcef2f
      - a7954b78-606c-4293-9ab6-06fe4aae403d
      - 2cbbfc52-036f-4f38-893d-40af0ee93f75
      - 5ffefc78-3f91-40e3-b0b4-d6dc443921d6
      - eddbd535-ef9b-483f-a410-63efdfe27489
      - 757e4ba7-4348-4764-a910-6bb8b2bc11f1
      - f020456a-2036-4871-b529-317ac6baa614
      - 0900c2c1-adc9-4f43-a2bf-98f0586f2175
      - 78dddbfd-a527-405e-9e0a-2e91da69a557
      - 197b4621-b2bb-4159-bc26-80a3791ef7d9
      - 614c167a-aabe-4db8-8397-73536e1d3274
      - 7ee9f5ea-bd9b-4b66-9fd3-0564745c54b0
      - 9f4a7155-7863-409c-afbb-ccc70431421c
      - 9230c454-fd7b-44b0-8bf9-65ab14f4a85c
      - f4ad2225-71cf-499a-b1de-7febee233a43
      - 129fff84-5931-4f13-8392-e153a4c3982c
      - 74eea7a7-615e-4148-a514-416b0e9e9e24
      - ff8e56f0-0bfc-401b-b894-4d318355785c
      - fa992f28-f718-43be-9d76-1b5ac094002e
      - 9fcf05b3-bdca-4592-84e1-63ee989a255f
      - 95e15a3a-22e4-44a2-b32a-9df568b65e03
      - 791fdec7-d325-43e7-ae1e-31e50c5097ed
      - fe160ba6-1921-4fce-88ff-878c82276e54
      - 092b8ae2-e528-451d-86a7-f28a47d2914c
      - 81d06cdb-7581-4370-86c9-223b3861c65e
      - 07a5f84e-22da-47f7-8bb9-7551a274f05e
      - ce9bfe93-ca97-4a82-ac72-b8e405194c63
      - b74a6f66-8976-469d-958d-f9848dafd0e0
      - 73238455-e65b-4fc7-b4b7-c166c15296e2
      - 349f6b3a-293d-4212-a314-6f81f4604ebd
      - 3d0c6673-12fc-4cc2-b45a-9095610db966
      - f444f4d0-312f-48ee-b9a5-7bce9713b983
      - 3edfba47-f3c6-4b8c-8890-4c25a22346a6
      - e3571019-c303-4cce-a4c7-760f8cd810f2
      - e24dffc2-42b7-4c8e-b9d3-512267800ed6
      - 98e09c7e-3131-4dee-b049-b2c65fe0f630
      - c704b88c-7d14-4866-bc90-d34c7cded488
      - 8954e682-d764-41ae-b6b8-b98102db13f9
      - 54203a85-30e8-4507-85c0-0a6ab73a3c82
      - 5f929c8f-4fa2-41bc-83ac-1efbad22be58
      - 393514a5-6760-4d02-bb68-bfc02d12abb6
      - 5cd40e21-d94c-4cbe-8406-62a9cf01e51e
      - 11ca5972-1d9f-4186-8e8a-cdd22a75105e
      - c8a10c5a-f37c-4cac-a74b-a4a99427acec
      - 9505419a-a97f-4263-9b85-9c832ac6174c
      - 91c432fa-c02e-4e58-8149-627a1c8e3b9b
      - d65f32dc-7c0c-41c8-b386-b140e5b78fe7
      - 77a11ffb-b0d7-4383-812c-9ab1e748892a
      - e9bee565-f9b7-418e-ae8d-095f9f4cb386
      - 12b1d37f-bfb0-4232-89b0-a63b97a24826
      - fa7ca059-2630-4243-a644-7768c3b93cf1
      - d4f2a8ee-7764-4cd3-9536-16c1a15e1e9b
      - 03e02b03-c90e-4fc1-b9a6-a744312d8382
      - 246c3908-8ca0-462e-8f29-3805fbf562d2
      - c0e97c67-2da2-4c98-98a2-a38f1d53858c
      - a117b142-a93c-4a62-9735-5fafb26d12ab
      - 7a0dbb52-01d7-40ec-9e19-bae7a50d335d
      - ddd02613-85a6-41a0-ba21-7e78531f26a3
      - 6ea790b2-eabf-460f-97a7-75b7e605591f
      - a748b01c-838e-4e77-9e02-5b538b6f3296
      - 8e09d2f0-0728-4105-bcbf-6eae97c61f36
      - d1b6e9f2-0407-4234-9f5b-57125f71a8f3
      - 539ffce1-c15d-4a47-8f6f-57e18ce9a239
      - 3962e80d-7a18-4d4d-bfcb-c9ab14021216
      - 56b1efd4-d235-4747-bba1-e19850f8000d
      - b4d8ba9c-75f7-4f9b-8935-2f22f97563f9
      - 7d3c2015-ef9d-450e-897c-ca6ff859ff7f
      - e4d65afd-e528-488f-852b-3acb49c31d41
      - dfed1d02-bf55-4414-a9c5-12704a29de06
      - 84761518-eba8-42c9-ae35-c344b7c2ad01
      - 3dc12697-72ca-4943-814a-eb6241d7e38c
      - 69cae204-615a-45e7-8a1b-d0ad350f0b1f
      - cefbfaea-bff1-4da8-aefa-02d8bc62f4e8
      - 27990733-6058-4221-8ff1-241bbe7dd10a
      - 5246490b-d584-40d6-8217-438fea9571e3
      - 737d0441-cf90-4b58-a329-64aec65d0ed5
      - a53477a8-0a66-4b57-aae9-72c95e6892e5
      - 772ab3e3-76a5-4f94-a133-8c7d48952527
      - 8af6cf95-d2a9-46c9-89ff-643576dba7bd
      - d73b732e-933e-4f5c-996a-d404ad984e2b
      - 5cff15bf-21de-4433-bcc2-b0be50d54954
      - 1200e1f1-259a-4cd7-b08c-a6b48c53b439
      - d1d4f826-530d-48a4-bc04-2eca4349f869
      - b011c5c1-703b-4e8e-9ed1-4079a30708cb
      - 86f78f44-91de-4265-9624-b63d98012806
      - 5d4ee761-fd53-4750-a7f1-cf9a2dbd7e30
      - 92b033d0-74b5-44de-bf15-833a7982de41
      - eb69917c-321e-4f36-abd6-ce0f95188781
      - 1e931030-6414-4496-9dbe-c8cadc96b4de
      - c850306c-a016-42ec-8ab0-26481334e3fe
      - ffff13a7-188a-4594-8a9b-6f73c447d1fb
      - 44db2cc7-aa73-4566-aa4a-c86c33cf3c28
      - 82297898-1e62-47b3-8a8f-ef7e475a239b
      - ca9444c2-685c-429a-a56d-fd90ba0bb727
      - 28eedada-fb25-4b24-b30f-46ce5df43f6c
      - 7ed85689-f1c3-481f-840d-0ec39cc5dd26
      - d15462c1-b73f-45ae-845f-9fb5d9c87fde
      - e4db0628-3c21-43f9-87dd-92db29b6a5f2
      - 8874946d-1b8e-4dfa-aadb-4b459ac83b77
      - 1ded86a5-346f-4f29-a4c8-80695e55295e
      - e4516a95-fbc2-4882-960a-cfa9b24920ed
      - c5055fc7-1db4-4902-ac8e-c6279f5b7db5
      - 65abc2a1-bb2f-4502-966a-240e73b5c3cd
      - a098d01c-7e5f-488e-b749-34364cc34e1f
      - facd23b0-e554-424b-a8b2-ff4806355ef9
      - 80d53a90-abf8-43a6-9bce-5fbb7b107290
      - 70db64ec-94e9-4b27-8e38-46143506e089
      - 984cc9b5-b4a8-4201-9090-2dde1ed91e03
      - f0cacc12-b455-42cd-919f-0ff5de5aa0a2
      - cc240898-f8f3-4c11-b95e-7fb8b54441f2
      - 9e992429-9419-45fe-975f-4402869d926a
      - 1681372b-e38c-4b79-a1d8-77b663518192
      - e5433a4c-6f93-4a67-b53d-87e71e42148d
      - c5d64f29-66cb-441a-a71f-3070fa2c456b
      - 2bc1359d-e97b-464b-8525-079c03026db2
      - d1ffb0be-6bd6-4376-9a39-07c257312ca2
      - 404eb7fb-dd33-47be-bfc3-c6c5c8f39753
      - ad56d5b3-78b6-49d0-ad16-bb10beba17e6
      - 9fe85e84-1b9c-41a3-9b58-d344ce9d1d5f
      - 4e344b83-da1b-4d8b-b718-6f3fa977ce4c
      - 7567ad76-4f5b-4c21-b163-cff98e9436f3
      - cac50488-e9a1-4eeb-b74e-00b1aa693371
      - e2c3c1f3-3dff-43fb-8fca-4884d2919a4e
      - ef6ea607-1fc2-4d03-882a-8c38cea53883
      - 9a6fde87-0297-403e-aa93-375d2b4c97d0
      - 1e96424e-f26d-44e5-b4d3-9c6fc41cd3b8
      - 4db09683-179c-489c-85c5-323bf19e5d33
      - 2eafcbae-6ba5-46e0-a97b-5e38d2363215
      - 6582e59e-ba38-49e1-abd5-bace13620f93
      - ff22f892-88d0-4534-a6be-4012964f001f
      - 34f10ed9-7c3d-44a6-950d-82252f782dbf
      - c6842610-d54a-4571-bb78-f26b0b18e342
      - d56c4b68-4db5-445c-b1fa-ab2cf15b12b5
      - 08f2d934-ecd5-4b3d-a2ba-d0204b4fe7e3
      - 17ab15cc-e06d-4b3c-8d71-a8b733dee163
      - 78340984-c04c-40f8-acca-426ac2f6b5b7
      - e2547135-385d-41d1-9ad2-ce6257125c52
      - f5739b7a-89e1-43c3-ae3f-b1336a7242dc
      - b79e4749-8fdc-4b7f-b116-474557af4046
      - d1ee745f-3c48-4a4c-851c-030b8fe46ec6
      - 007a16ac-9b4c-419f-9f52-0677c92afecb
      - e283d724-71cd-4432-8e86-25d9d1022fe7
      - 482fadef-5e68-451c-944e-99817275691b
      - 099d6679-ae66-4691-8115-237a7363c358
      - 13c4a115-8f37-4a3c-b23e-d29f31f5ed35
  Subgraph-2:
    id: "2"
    name: COVID19
    steps:
      - 0379f4c7-6c19-4419-a22e-78d75096a2db
      - 0ba861b6-8a6d-4fea-8b75-e3bf6df8495c
      - 116f76df-1609-4f20-a5c3-c6c53d9df388
      - 1a07c73f-2165-4502-82e8-e0d16f3e84f3
      - 1df1320f-2bc0-4e49-aada-7d1cdc2a921c
      - 226721da-6c33-46f2-b05a-b83fe01a0ad7
      - 27a00d2f-f497-4037-bd1b-9a300b7e486b
      - 2d7fa296-1624-4ab5-832c-5981140d1889
      - 2e9efcf4-e476-492f-9dd6-d60139a4c055
      - 318f3ebf-e947-4270-b423-9f9a7df4142a
      - 4882be83-f51e-4c07-b63c-2aedb956b37e
      - 4a235658-000b-430c-b1d5-995611ec892a
      - 4c8a6f07-8faa-47e7-89c7-b368b577c857
      - 4d18bc9d-5c21-4f8b-b472-b9cf600561a3
      - 4de7ad89-d6e2-45df-8d89-a88002362b43
      - 642c43ae-c4ff-4125-94ae-d8857c2987b8
      - 6510b334-0ed5-45bf-bbfc-3aa4794280b7
      - 687ddeaf-853a-433a-8b53-67f18ed6dce9
      - 6abe6476-bced-4dd8-89a0-91536b83fdd1
      - 7281455b-da7c-4ed4-bb6a-21ef0e7426dc
      - 75374493-6052-4c98-91b7-2a14c8700995
      - 7be57c5a-0524-44c6-9a40-c54560fa4bee
      - 81021abe-795c-4688-9eca-93eea6a4071d
      - 84ec3094-2d34-4e0c-aa4c-785eec57be16
      - 85ce4834-e8f1-4e27-a22b-b778aac37aab
      - 8a11049a-518d-4f95-9090-e72ba2a17d12
      - 8fec1e99-f3dc-4b29-ab66-95c9d74bbfcd
      - 90f3f36f-a53b-4384-90e9-c663c51c378f
      - 9179f14d-4a02-4af7-bd78-696f8815410b
      - 9733707f-6cd2-4e45-be2d-6315141eeaa5
      - 97e748c1-af2d-4c15-b87f-4d68cc76bfb8
      - ada332ec-d6f2-46ec-b26d-92e8ac61fbbc
      - b9868bf7-5976-4411-b733-f6ce5b25ea06
      - ba725ded-cdda-4fc1-823f-0526f84d0bda
      - bee1300e-1db1-458f-8d5a-d1ccac6f7543
      - cec6c0e6-9b68-4895-b277-5bec3f110546
      - d0958ba9-4a70-48a4-8029-6e6fc7b4882e
      - db2866ff-db7d-4cfd-a1da-7df7b208448d
      - df7d3781-0680-422b-b535-d58c4529dc3f
      - eb1d3061-799a-49fb-9a66-5ae95f82f11e
      - eb21b089-af8e-41ad-8d6c-8ffc82fd3670
      - ef13aa94-bc28-4cf8-bde5-85732d96e10a
      - fae73529-7103-4174-a595-d0f7372909c5
      - f244a787-4548-42f0-8650-51167d75b636
      - 0098a8e8-6f92-4ec1-a4d0-481641e8b81c
      - 08e3904d-88da-489d-a6e9-d3f39e242a58
      - 0a107221-6920-4a3d-a42a-8181e2cf9df1
      - 0bc5f916-1531-4f41-9ad4-691f4b30ff8e
      - 0da8c73e-ba4f-443c-992c-f4c0f70ab269
      - 12f158cc-0726-4662-8bcc-7d4207b00871
      - 15c78dc2-db90-4709-bd0b-febd4edef58b
      - 178d7668-edad-4ede-88cd-cc1eeb811ad2
      - 18475a2e-185c-4cf7-a1ec-40f23d5fc683
      - 24de8d4b-90a3-49cd-8fd6-3ac0ef1cf6a1
      - 2cd92ef2-4a62-4b31-be0c-323603cf9bcf
      - 2f86d16d-0372-4397-8a7d-d77ae8464b1b
      - 30e63d68-c499-4efe-bc08-a5bf3af7f03f
      - 41121783-3f4d-41cc-a670-2519b34666ad
      - 47d6789a-989f-4456-84d5-ec209d81f9ec
      - 60ce07e9-8217-4f3e-9117-3f4a56832894
      - 61107919-bb9f-422b-9400-3b247d25ee05
      - 6af225bd-94bc-4f99-a963-b57dde927e3b
      - 6bd8e538-fc06-48af-941e-0ecd9d8fd0d3
      - 6d0142cd-b59b-4905-9177-02b251dc5b54
      - 7330b2f0-7713-48fe-8a5b-704a8d79fd59
      - 7e4cc7b4-ffaa-47db-9b65-0a4f7a96ba5b
      - 7ebc04be-59a0-4238-a50f-e641852f6b7d
      - 8b1e5a4a-8368-4e12-9427-e8375b75ebbb
      - 8b210a22-acb2-4636-b723-c477e48fb82e
      - 93b8af1d-5aef-455d-b2b4-d24c8d5bb263
      - a25a6359-8e3c-48dc-aaa6-f0e3d34f3427
      - a2864f23-c509-48e4-b85c-be030eb0c754
      - ac27dc84-07b3-4884-be5b-70c74434e4bb
      - b43a807f-999a-4040-b442-77c9e5e354aa
      - b7beb874-6aca-4acc-9279-f142778863ac
      - b8ee400d-b872-4a28-8814-6254963ff19b
      - ba31712c-41e0-4305-93f5-34713b368917
      - bf5c5e09-a394-44cd-a087-926def526915
      - d02dfd0a-1f66-46ee-acd6-18953a31f2cd
      - d1b4aa40-976d-41c6-9b98-d486ebdd14c1
      - d5b4c85f-6b96-4216-98b2-a99d30079125
      - d73e0950-6456-44b4-8a81-c52bca3464be
      - dda1eb64-446c-4e0a-b89d-63d416dde1fd
      - e168efa9-7d1e-4235-953e-68ccacaa80b5
      - e3ffc132-78fe-4421-aa99-d7c3418128d9
      - 0447b667-695e-42b9-ac42-defe8b568878
      - 06db4494-e099-40bf-a307-5369ad032515
      - 090a1cab-ef1b-4ad6-b780-dc14a688a33d
      - 13d388a6-e7a1-487f-be1d-47fe4003dcde
      - 1de465cb-bf5f-42fb-a2fa-f296908cf85b
      - 24070edf-d770-407a-b682-ed924d1eef54
      - 2b9ea545-bc08-4512-886e-d8b9e25c09f2
      - 2e479ade-1550-4668-b070-d7e6569bb9ea
      - 36176697-87fd-43f5-be9a-9e5f82c6245f
      - 3e21c3f7-dd6e-4d21-ba1b-f9e9af9c043d
      - 42d08f56-35f9-45d0-890b-457e01467ba7
      - 4b803b4d-3349-4141-8cf8-6acb9f911739
      - 4d30aed2-cdde-4218-b4c2-8281cad45a53
      - 4e2edd8d-d65e-4603-9f2c-85284a57000a
      - 56d13065-6010-4dfd-8462-48431b56bac0
      - 5b0970c0-87d0-4105-a7cc-7caf47405a70
      - 61c4e4c8-6456-48cd-a954-5c4b4050eeae
      - 6b5e998b-445e-4b64-b1f0-619f8e574a29
      - 6dbdfc8e-ca6d-4cd0-b99b-7db1c4b5bc29
      - 72618740-78f2-4c56-9bb6-7efdc4ee3ef3
      - 73d7fd7d-877b-480a-a76d-bd67818df779
      - 76fcdab5-63cb-499e-be4d-10690112130d
      - 7f26c522-088c-48cc-bdc4-efa4a6111439
      - 84da04be-69b2-4116-a29c-f7486c29cbf8
      - 87a1a526-4b16-4765-9621-0cd83aafeba0
      - 8aab7262-f455-4674-b104-24b174e43b48
      - 98b9e85b-6bda-4374-a0bb-a708d7cc23d7
      - 99960c00-0b04-48ca-acd6-53fce186d983
      - 9c8b93f5-1f15-46c8-a6e4-57de98a355e0
      - b6da50b8-5b3a-4540-8d8c-3375efc5031b
      - b7b59eae-3046-4f95-ba0f-f5732de4662e
      - b98359c9-9008-4aec-8411-ad341f563975
      - c9945880-fc81-4efa-a37b-7b481faddf04
      - d040779f-2724-43c0-a5c6-76759aff2e5c
      - d69da4ce-bf59-4575-a588-6ddf7183fe73
      - e164550b-12b5-4661-a2a3-cdb9be79bf76
      - e23c2c9c-f96c-453c-9a9d-15e00fcf23f3
      - e3b6cb14-d998-4903-8bd5-135fb7432cba
      - eefd1525-759e-4755-be7b-121ba6de7c0d
      - f0f430a2-1e4b-401d-8051-5aced0203d88
      - f1939ae1-6315-47b0-93c6-f3080ed225a4
      - f562ffaa-25ed-43a8-ab49-1ba42b30dcb4
      - fbc3e633-a053-47c5-975b-1ddbaa52d8c4
      - cb3660c9-dea1-41e0-b74b-55c2b098d3c1
      - d1e4441c-841a-4051-8475-a61b08f20f69
      - 7cc809c2-08af-4774-b133-d283194e6f89
      - b8e9dfaa-3a2e-4865-8db4-bf90d433f7db
      - 16627343-c0bf-4ec7-9fa8-db952d8c534b
      - aef06883-424d-407f-89e8-f6f477b6b75a
      - e1386328-29f9-43cf-9bbd-98cbaf8bc987
      - 1b6d186c-51ab-4b2f-b438-5537f5a96f25
      - b7a86d87-18c0-4c97-a55b-d55322d9e65a
      - 2f48ac56-8540-46f9-b975-84feb54fa212
      - 275be444-a251-41e2-b907-15e26a3084de
      - 22ac5df9-c152-4f8d-8207-aaa0060f47d1
      - 2f4d34e4-f1a8-490c-9aa9-eafd7074237e
      - e30f45e2-2f80-4f0e-89e3-f66d6b61fc6a
      - 6a5fd8d7-a6cf-4e28-8741-e2b51e6dd6e9
      - 5e8bfb82-cea3-4494-a0ba-0448a2107221
      - d632dcf8-8617-48b8-8a1a-49aa7cc6d9bb
      - e50195bb-fdb3-4fab-80bc-be2985886333
      - ba4dc13c-86cc-4d88-88c8-4a21e8ffbf70
      - 728f2f74-db09-4e81-a71d-4ac451f1814e
      - 6f1c84fb-f8ce-499e-84a1-4f8f82e606f2
      - 14c57a61-00ca-4ac9-bfb5-2b5300508c90
      - 92686e97-5f48-4267-8fd2-028f1d846bc4
      - 7c3bcfb8-84ee-488b-9e8b-a518967773cf
      - 660f28c5-e83f-4e02-a1c1-f32a35644acd
      - 16904199-8dec-4547-a973-3e1d7c2eb8be
      - e37b2693-5985-4342-90b7-f4bbd2a712af
      - cb5d3233-7eaa-4e47-81fc-75d63908ccec
      - 73f05e9f-873d-478d-a1a5-d873eebbb71e
      - c7d4cf2b-b842-49aa-91ff-28b5248887c2
      - 378af1c0-3610-4b03-a861-649f2cc85431
      - 382833fd-7614-44d8-9b9b-c3c34b737691
      - f602e5c2-3ca4-45c7-ba78-347b69ee236d
      - debf8dfd-e9f8-4891-9ff6-9b664c776deb
      - 74646b7a-32ab-4c12-8cd0-0f8bd08ad8be
      - f2e8ece8-62fd-46ca-9c56-ff2468777f95
      - 5abb5ddc-9d89-422c-bcab-0ffd89eb9d6d
      - 0af91334-5cc9-4bf9-a4f5-dd8ea0a235c3
      - e281fddb-c279-45b9-9a42-1ef36116d094
      - 3cbdd297-af6e-4eeb-b1f6-3b8394445f40
      - efbdbb9f-38e5-450e-8d8f-aecd65c98be1
      - c9583aae-4227-43eb-82a4-d716c2076ea6
      - 421f9827-d1c1-4b34-a51b-9b6c14f46147
      - b8587525-89a2-44d1-b32f-1db38a79b65d
      - f89a6c5f-dab6-4b08-afb8-df2b26b168b5
      - 6646786e-57ba-4ef7-82da-f9a06f6379d6
      - 2ab4badf-df01-4a8a-9a54-8e15039b356d
      - e846c8e0-7dfe-4760-bf18-2bdeb3c24419
      - 8b7e6d0f-31a1-49d1-9dd3-1444f1f8fcad
      - a978cf93-090d-4386-8ed8-3889a8c49e06
      - b778c85d-b351-479d-82ba-c237058a200c
      - b89a2681-9485-42b8-b7b0-df088a96313c
      - ff5d42e6-cdc7-401b-ac16-96fe5440b010
      - 631cf7c5-c2e5-458d-a53b-fa78fb8785d1
      - 8b76df3a-d6e3-4d91-a412-b76eb86cdca0
      - bc6eb10d-bc5a-4fa4-a0a9-6fda572f10b7
      - e967fb53-efd8-4adf-8725-1c5c5ab12b48
      - d2eaae83-d92b-48f1-8dba-06cbef2a9134
      - f1e550b8-eb5a-4fd3-a003-0beacea234b9
      - f6d74f20-ad4d-4bc0-a5a1-c52bf3b60fa1
      - af0d8bde-6b4f-48f1-af3e-d2bb46c8e879
      - e05c2234-06f6-42ee-bd98-06264205ead1
      - 3e25c266-efa0-492a-892f-6e833da27992
      - 7f0b6d13-7d24-450e-a507-20a43c02e90e
      - 3c87b894-6738-4ce8-8e61-cc3cf273377f
      - ac4a92f6-a9c0-422d-9d55-b578aaaec8e3
      - 25baa641-c3bf-43ee-95b9-90c02b0bd748
      - e115e50e-3828-4350-b5c4-f487ccc7ff2c
      - 829b19e7-b679-432b-94ab-91ff2511bb0a
      - f27afb3c-a3a9-4c4c-b331-554596ef2856
      - b60e28a3-9c5d-4db5-ba9a-8f2494458793
      - a93f78b3-2a0e-40de-85fc-da811ce1534a
      - bccd2f42-4606-40db-8c71-8b4cb5bba098
      - 1c670517-20b6-45ac-9683-ce44e13efca7
      - 55841278-7fc8-4273-8abd-4a0b5be1ef26
      - 86f6546f-d5a4-448f-828a-4bc074d4ba37
      - 189e43bf-dea3-4ce4-a20d-a5b81daa14c3
      - 968e8489-02ae-46f2-871b-a98d13ac980f
      - 82fc7458-c5a2-42c8-acc7-0bee5a9d168e
      - 36f3d56c-320f-4582-9e0a-c437e3b3d3a0
      - 9558656a-6cd7-4763-a669-8905a127a969
      - 323b52ad-492a-4532-883a-3ab20871fbaf
      - 6223ad5a-6a1d-4958-941b-98609eb132d4
      - 17c4a927-d86b-4ca8-ad0d-148b0e6ff125
      - a927c4c3-7db5-4641-8e49-4f387366fc64
      - af2005c3-0e6a-4370-8c89-208e457fd2f7
      - d62118fd-3d43-44ef-9e91-625d9d9d2379
      - 71b52429-dbee-41af-9ae1-b1a3b7930c89
      - 584f8677-8856-42b2-8edd-484247bc0758
      - b8327d32-5b36-4e0d-ad0a-f9c891a88848
      - e3ce72e3-86e7-4104-a18d-1b413ecc6b79
      - 0ab0bdab-40b6-4e7d-b15d-fa340a6dee2c
      - daed5fc5-ae3f-41b9-9cc1-257a3a773a57
      - 21add6b6-6618-43d8-8fb3-976ec03ecd58
      - 05589464-1fd7-498e-a05c-2bc93faee6c6
      - 1b79858a-8478-4725-91e6-261ddbab810b
      - 73a14954-c933-42b4-8857-411000b0f522
      - ef442b6a-44b9-47be-ba6b-681dbedef86e
      - 4682c078-e647-4d45-942b-2548037f9ede
      - 21ee13a5-8921-4264-a9de-b3b4453084b1
      - 5a2dd376-612e-4a4c-9972-7e444e3ea5fe
      - ebd7e35c-aa96-4880-a943-439f9daf3233
      - c449af73-9764-4de4-ac0b-cb2ebc458e44
      - 56a85e85-8750-4bb2-bf12-1744577fd6ad
      - 6f4d1cea-a226-4261-bced-e7f710d3529f
      - e8677018-c6a9-4f1a-ae3f-e3b53d48a876
      - 68625c19-cf37-4091-865b-5be536709f43
      - 86c4d316-0bf1-4c7b-8c47-3745d7f702bd
      - 9137d0c1-272f-4395-90d6-400e3e63c01e
      - 2c4660bd-a9c9-4eba-b956-a2137ce59fb6
      - 2d6e1fd1-5e86-467f-925b-cd05af163f5e
      - 9225e06f-f7e2-4718-8822-477eed546400
      - 394a737b-4051-434c-b1e4-dd3bee0326a8
      - fe54b999-bf60-4423-9ec2-703100e37c70
      - b61b5d50-c1ad-4ca9-8752-daea24a8cddc
      - 4faab9e7-6a61-4691-bce9-bbc6f1f9dbd8
      - 12171de7-23ca-47a1-a43a-4a9d6722ad67
      - 06eb00cb-d677-4b41-b4e4-01597dd2e3ca
      - 3ff02806-0eb6-439c-aae5-f4c82fc73313
      - 644288af-e755-48c3-af9a-ef20b79be5da
      - 8da7d218-3d65-4995-a305-9b0a5abf5c7a
      - cd1ee2bd-38a4-4e76-9895-fbc6d5205a10
      - 702d1bde-03b8-4acf-ad2a-a855cca4789d
      - dfcb4ae4-d4ed-4c40-8611-54190f09e20a
      - 021bcc5a-cfa1-47fc-967f-dbcd52abfec6
      - 1e0c3c74-1e21-4f6a-8ad8-51293b45ad19
      - e5c69382-8235-4dad-89ea-f28b8c99a494
      - 7676ee28-4e5a-47aa-921c-17fb8bd47d4d
      - 05ff272a-09d9-4250-b8db-394f2568867c
  Subgraph-3:
    id: "3"
    name: SPORTS
    steps:
      - 040c3ccb-0ea5-492d-8f88-018f4905bfe4
      - 0416541b-5752-4f3a-a194-4421c6d728cd
      - 04e43699-b701-42e7-86b0-030044b9f2fc
      - 051802c6-acbe-471a-b562-a78a16f0ce3e
      - 07154ca8-beea-4b49-a4b1-7523921a625d
      - 0fc24462-e2b7-4a17-a4ce-2910f155416d
      - 15b3c00d-e3a2-4a57-ba1a-2a428acf1b70
      - 18e97d07-c601-4662-b1b9-2fbe00a1bc94
      - 1d09aed7-cc54-471b-b333-477095e42446
      - 1d7cd2e1-96c9-47a3-9e90-e72ad474ea1e
      - 1de57ae1-e2a6-47ca-8988-f4ff41a336c5
      - 1e3d0daa-3e8c-4722-9e67-c05b58cc9784
      - 1eaf1cff-9e79-464e-baff-f03d88539a84
      - 1edd48a8-2bdd-4838-aaac-dd7bc6b8642d
      - 1ef961a4-151e-485a-8c66-b78f1cef1e7b
      - 1f096d50-1c30-4c67-9445-679b1fe97bda
      - 22dbff5f-e89b-4697-96b3-556e29f5314a
      - 24518819-4f0e-4b63-8dc6-cb39c22d8fc3
      - 28b1e007-6325-4079-a7bb-d768e59b0fd2
      - 29650ec9-1420-42cf-9937-82731fe257b3
      - 2a6ea682-efc2-449d-8004-c0aec898b27a
      - 2be0c7df-31df-4b06-8d2f-1e6a17613f4a
      - 2e6dc0d2-2dd4-46d0-98fb-4cef922b9ddb
      - 2ece21b1-ad39-4d06-b938-c0923473736e
      - 2edaa239-135d-4db6-9416-846e453eb492
      - 3238d630-9968-4516-bca2-b5b09f8fa3b0
      - 33560047-69a3-4c1f-b417-54c1e0f9e6dd
      - 35f439d5-04b0-458d-a7b0-decb69697f21
      - 361f672b-64d5-4457-865c-39069377507f
      - 36e018fb-867f-46d2-852f-58f65bf6813a
      - 3777dcee-d6e1-44bc-90c8-b8736ef16f02
      - 38f35cde-f4ae-421e-92c0-0946bc4a62d4
      - 3fb379ba-44c3-4e96-97d3-2e48bd93ddae
      - 3fd9ccfc-1314-4c7f-82e3-6ecc03bae370
      - 40a08387-4c10-449f-a3de-202b981970ab
      - 4298d62f-dcef-4dd7-b24d-df7755461ae3
      - 44419c0b-a6be-43a6-bcd2-64025429e501
      - 4541e11e-6065-42aa-9257-190278d4d97c
      - 4859a042-368b-4279-a1af-1a445a045aba
      - 4bd9e25d-b02e-4d7d-96eb-ca4ea3a0acc6
      - 4d644cc9-062b-460f-84e7-9c21192aa619
      - 4f092694-c456-4ae6-8068-1c2b5c107dea
      - 5151035f-3d7d-449b-9646-82173df77a8f
      - 55bd942b-2059-4545-94e0-e07efb764bb1
      - 56d06e12-2aa0-4480-a35c-c3cc4b30caa1
      - 5a532373-027e-4138-b9a5-604aca000734
      - 5d030701-9d20-4d41-8212-92a947419f59
      - 64e36232-19e2-471b-bc85-ea6097c354a6
      - 6ad5daef-121d-4088-844e-403e3a4352c8
      - 6ee0c4ce-3de1-4834-8ee6-1656c812e31e
      - 7023a502-47f0-47c9-a595-1a37ea86542d
      - 73c2afcd-8d18-477d-9b1a-cffb73120bcd
      - 73fefcef-7b70-4bc3-9a02-3d1a5716c84b
      - 768587a5-63f2-4007-a619-dcca11343b98
      - 76aab686-649e-4fac-95cb-31a7c60e370e
      - 7f5196cd-a1e1-4417-a6be-becafd6284a1
      - 841883b1-ec04-454d-90d7-b00b763e8fca
      - 8514026f-4c77-482c-83de-a4a54d9fe8ae
      - 87865312-26a9-4a4b-98fd-0fea87dcba7d
      - 89e4331e-2e4b-40ff-bec9-1e8ca25363b4
      - 8ad6d45f-f21d-4a9b-bf8b-3a804a93d402
      - 8c105824-0073-457e-9a84-dd7c0400cda1
      - 8fc72a35-8fba-4f27-9400-b85e4bd56766
      - 92892b76-be82-4b07-a7a4-1d49eed838bb
      - 933c04fe-829b-400d-8e4e-becc3f2e2c20
      - 97e16cdf-9dbf-4cc9-bd1c-c5b54b59c477
      - 9a1dc16b-2457-4327-837c-3b91f13be76e
      - 9a98c2a6-ebf6-49e7-8f5e-2103c0bc41d2
      - 9aefa816-29dc-4e97-b26c-5dea51b99850
      - 9f9e5fe0-6a9d-4041-9add-2e15b9d7b08d
      - a119abb9-4141-4bf9-a892-f6b205ed7ee9
      - a49555eb-072e-45d3-8b6d-ea95273b5dda
      - aaec2a3e-0568-40c8-a8cf-a973b898cc0b
      - ac1b100f-db8c-4cae-b547-35559b2246a0
      - ac5f3121-7b59-44fe-ae7b-878475a63ade
      - ad6b06b1-ec8f-4fc7-9f23-22887150c6c7
      - ad7d09f2-7ad8-47e5-b0cd-642340447d56
      - b3d68545-b69d-410c-9e39-ed464a537ea3
      - b4eda8fd-101b-4059-9599-8c8cbe57fb1b
      - b9dd8445-f157-4eac-beb5-221bf810a427
      - ba23b889-666d-4aac-9f13-245d10524158
      - bf4fb1a7-11a0-4a8f-971c-20f39a30e7ec
      - c2f3cbfd-fc4a-4b2e-8ad6-6b0a4fd4f19a
      - c8ec65de-c7a5-43c7-ac50-d9d8e1bbd78b
      - cd0cd808-daff-4f4a-98c8-a520d6685924
      - ce5bf4bc-de88-4e6b-97da-97dafc174a17
      - cee95ee2-685d-4991-9b4d-b7fd2d25d671
      - cef7fe29-4207-4ffb-a720-74cec7713c4c
      - d0b18827-6908-4d3b-b262-7e74302d3139
      - d1154d94-37d6-4ca4-919b-182a7490918e
      - d99bc6ce-32e1-4b87-bc6d-cccf41095f87
      - dd36a276-da56-44a5-bfc4-96a8e6de5994
      - ddf3a05f-8e42-4630-af62-4c8999d791db
      - e048f0d2-b392-4436-ba49-e413d1df10c2
      - e18f5da1-a654-44cf-8575-667eefddb1b9
      - e8c558af-aa0b-4164-863c-771c82738c16
      - ed6b3001-7f28-4c19-a979-049bbe2a36a8
      - f123a74f-12d0-4915-b441-44be941fcec5
      - f164cc1c-2bad-4dca-87ac-a376a5c92c4d
      - f1685043-46af-4066-9ef3-74542486a1ab
      - f46073a4-8439-469e-8091-5fde12922da1
      - f89450b6-7fbb-4dc9-8965-fa55393e1ef8
      - fa606f8a-ebc6-4b17-9193-6ba2aaed24a2
      - facf5d0c-ca78-410e-8712-9585c261409c
      - faeea6bf-f44c-4431-81b9-7a116dbbd950
      - fddde0b1-be26-4f1e-948f-4d0791496999
      - fd82437e-fccb-4019-bdb4-02cca0a58ffb
      - 04356a93-6f18-4ce2-93c8-1b7f048cceac
      - 0abab25d-1e4b-42d6-ac38-bd0d668c0d1f
      - 0abf1abd-a5d4-4fee-9d6a-94976705b1f0
      - 0b31e985-6a64-437e-a7dc-c288604c1a3a
      - 17688c57-ee42-4264-8bcb-ec8a94032cf1
      - 18a8d01f-89b4-4a2b-bb03-8d9992633a43
      - 197ddb66-3e1f-47a4-9d25-44c59e3164f7
      - 1a84b3d7-9ac3-4bc5-a391-7e391e01b744
      - 1aa83752-dca1-4e8c-8b07-481e1272bb39
      - 1ae59067-1fc6-4695-a2df-53b1cdd9e7ae
      - 1c990739-d6c4-4c46-b047-d1104322a1ce
      - 1e15fd58-8b3f-4198-af85-77cb0a35a7d5
      - 1ed94728-8c10-4308-b0c8-5853e4adf100
      - 1edee107-d7d9-407f-b867-443dfba95234
      - 253eb850-170d-44d1-ab4b-20da4a2bd5ae
      - 27e2c856-6394-4582-aa45-61fc849031d4
      - 28d22957-dc67-433d-aaaa-e0412e48c59a
      - 293492ff-4f9c-4928-a63a-383d8c49555f
      - 29f2a1e3-4e91-4337-8690-88f7885ee093
      - 2d791114-0da5-4e01-aa8d-700d824188de
      - 2e9e691a-f73a-4881-9efe-50c62b495ec3
      - 2f0de062-d4d7-4c13-8cbe-1568da8b72a1
      - 323cd6ef-8873-4e9d-908b-c6d002644b51
      - 33617ce0-8251-4c73-a2f2-408ca19fbe96
      - 365a2a4c-f084-4d09-9cba-6e95fbb0b0c8
      - 3bf10f5f-1fd4-47b8-a17c-875e0492e865
      - 4025122a-7e8c-4496-9dd2-a272cb882fed
      - 434bc3df-9de9-471c-abf4-e929134533c8
      - 4615b657-af1f-4471-9bef-be336859428a
      - 4709b7d7-fa99-43d0-ae56-f8ba7106d231
      - 49519585-2f76-4123-99fd-12018eb6dc8a
      - 51727a60-5854-44f0-aa97-9439359bfe0a
      - 51be0661-41d1-48d5-b852-d2f9b1cad025
      - 545fcded-0ff8-4f0d-ac41-e87901bca4da
      - 54d5a205-26bf-4553-b3e2-71ab331c11a6
      - 585d34eb-b3fa-4b0d-8167-df088e4fbaaa
      - 58dec2ec-9348-4c32-9967-996efcb61658
      - 5c09c964-c970-4512-adf6-cc8b3b2772bc
      - 5dacad9e-20d6-4afd-bdc5-40c189883249
      - 667d89de-b0f5-4c68-9d35-3c50b34ddfd3
      - 67d004c8-c68d-421a-b767-d3527ae8973f
      - 697935ec-b432-4c87-9b34-b2bf0561157e
      - 75e13b08-d001-4294-9ffd-b7d361b3e7f1
      - 77cc3993-1b83-470a-8674-8a8484d1db00
      - 77dc7372-4598-4d2c-ad3d-91fe7b6927cd
      - 8062f4b3-6354-4055-9ba0-b7d2e37925f6
      - 83061e2b-ae79-4798-9cf3-4d708a31b1ae
      - 8357faca-52b4-45f1-a409-a2945758e47b
      - 85ad3982-efe1-44d3-b803-1e6dc463cdc5
      - 863c52b6-322e-40cf-a3ad-11455638a150
      - 87f3c42e-2880-4143-9921-4b8ebdb1a995
      - 8994cb13-d5ac-447b-8795-6a0fcfdc2dd0
      - 8f2dde08-75d7-4907-8f05-256d8ef4f240
      - 96e430aa-a5b6-46f0-a7d6-13547c2d99d6
      - 97b028b4-e249-4eec-a847-b5fcd84e7720
      - 98f71670-23d9-471c-8862-0e8cfed1fe6e
      - 98fbb95b-7622-427f-a83b-49746da85a95
      - 9e259314-4ccf-4619-8a01-e0cdea14daef
      - a06169b3-ac66-49ad-bfbc-d0a894a36b63
      - a0747308-bc86-4197-b1c6-09beb2f98c94
      - a0782b69-93b9-49e2-8e49-548f5f24132b
      - a0b8dab1-2345-4e4f-9186-841eb8951e70
      - a20eb6b1-77c6-4ba5-aabc-59c399b73339
      - a6bf429d-abaf-4c46-8f35-378ba2a41c09
      - a800ea7f-034d-400a-8225-a5309e696f97
      - a8304662-9f57-4b58-8d46-b85443d789e4
      - a832beec-3d97-4e9d-ae96-1fcdc6e8b854
      - a867b7c3-cb97-49ac-9767-efd2f9704ab1
      - a9973bb1-584a-426d-a9e1-a03ecaa09ebb
      - a9cdc8a7-bd51-4960-8d9f-3606c4e03219
      - aa1602c9-77da-4031-b2a3-1b60510285e7
      - aa2a5c7f-e3c1-4da9-8b92-6f2311113bf2
      - b23b7efc-6c56-40d0-95c5-69059cffde22
      - b7694d83-fded-4938-96c4-d0320ce7a6e1
      - b77d9d54-73ce-43f6-b14e-3f7da48b908c
      - b98a6632-6c14-4862-a8cc-70d0f4154ba6
      - ba3e29bf-4506-41a8-be48-0525e0278dbd
      - bc68772f-795e-4196-b67b-3a616139e97d
      - bea21733-7fd8-4f90-88d6-3202a4e44f80
      - c20d5648-3ef2-4a40-aa7f-c1e7f09c9311
      - c214b735-895b-4f55-9bca-1185368e28a7
      - c2f14182-51c3-49e5-a5e8-78f401f0ba1a
      - c4f4fda1-dde0-4084-a06b-bc19512d6043
      - c531f9c2-b0c6-4026-81de-8b2c8d6fb6cc
      - c65f5dd8-3274-41d9-a7cc-992e23513041
      - c8d78dba-517d-4d00-a02f-6a049e95cc6e
      - d0378076-28c6-4191-95e0-41bde62625fd
      - d0fb5202-a59e-4dcd-a94e-5e0fdda68ba2
      - d23c971d-74a6-4c47-8701-8325b3de51ca
      - d55294b3-39ac-41d3-94cd-aa9c6ee9ee47
      - d646a5be-45ba-4d5c-9905-d4cb826ecde1
      - db016104-e883-4910-87da-2f999f2937d6
      - dbb09a5d-59e7-41df-86d6-f3de2775826e
      - de72ee73-fc7c-4b9b-ad84-3177f8920f76
      - def70291-5bce-476f-83a2-381d2df0d22b
      - e5b5facc-f47e-4fa7-9644-1ab49f567fa5
      - e6f8d703-7706-4cf9-abcf-9a8790bd0aa5
      - e9345cda-ffc5-48ad-88c5-90b4d2ab8ec7
      - ebac0071-1d83-4f95-a09a-8c011a05827c
      - ec5b8449-7811-402d-8f05-9ee18ca81eeb
      - eccd3808-143b-4f14-9e2c-fd16c87080ee
      - f2ac3a73-1e1a-4b00-8d32-4c3f6c51648d
      - f8bf6be1-9b74-47f1-8aa3-9f7c93ca6759
      - f97aaee1-dde2-4251-a70a-5bb9619f0454
      - fad4dade-cb48-4c10-835d-d8b01623f1ea
      - fd3d984c-beb1-443b-b4ee-9b625dac5dd9
      - 034a8b2f-2f42-422b-abf0-849fd0e49c43
      - 068292c4-e80d-4918-9b97-b865ad48e1b6
      - 08e006a2-d985-4b18-a493-d92c7117895e
      - 0e5b1e71-a1c0-4642-b699-4aad4e5ab4f3
      - 1123f56a-8f9b-4d20-aeb5-926f32e0a135
      - 122ff244-eb3d-47a0-993a-0cee3ae045c3
      - 12ee2de2-c1c6-4958-ade5-e002b3f74196
      - 14c6aad2-4be8-4c0c-bb3c-7dc364e59a47
      - 15cd8b2e-1a21-4733-a260-e80e6fe6798f
      - 1733301d-1887-4ce1-a8ce-666e003bd498
      - 19c3b010-8634-439c-9169-c0384aeaddca
      - 1c6d416e-58b3-48e0-9771-56aea45c439b
      - 23e57d17-dd2d-4dd3-adb1-4213723c7658
      - 25c145ec-fbcd-4dd2-9d6c-9b7a21ec2f6a
      - 32b0177b-33a7-4a30-860c-38f7d2daac09
      - 37897788-63b7-42d7-b828-3f20047b7a01
      - 37e78a2e-5546-466c-abbd-dc3c13cb2d0b
      - 3984bef4-6bc7-4a19-9797-66b72771eb32
      - 3abd3fda-085e-4fa9-b2d7-6fdf4b1fcdea
      - 3ad60a1e-35dc-4446-96c7-19bf7040cd6f
      - 3ae8707b-f72c-4ac0-82ce-e6e6ee1de4a5
      - 3d20b844-3be0-4ec1-bd45-ae3715a82a19
      - 3e11aff6-ae60-4b84-8008-818c82b30c75
      - 3e5d1c54-07ef-4d2d-8b62-b238c5cb2dfd
      - 3fe5688b-9868-4bec-9e2e-a3c85d05be76
      - 41cf809c-feff-49ba-82a2-6446658a54ad
      - 41e3a4df-ea89-4ee8-8d68-32ce98362a9f
      - 47d0e572-0113-45f4-b43f-37ab69062b44
      - 49e68baa-91f4-4f57-82c4-e70a2a67de16
      - 4d37c659-b9db-40f6-99a5-ffb6e7b8c416
      - 4f47ce5f-2bf2-4e2f-859c-6aa8473d40cd
      - 4fafca79-b668-4e9c-aa22-0ca22ed5c841
      - 51eddb9f-e997-4535-9ff3-9e552a6d1ed4
      - 527a9f8b-d4d8-4e02-bce5-94105d9931c4
      - 55adb33b-2e65-4f42-84d5-13352dd6e3d6
      - 576b42f5-5ca5-4a25-b4c5-1a6d13896d94
      - 5ce8c8a8-fa97-48ae-9a85-5e65aa34b040
      - 5f006469-bace-43f9-b289-bab8108e39af
      - 642c4ecb-cff4-474d-a026-c10db3d181ea
      - 65080d1f-9742-4a22-9c54-c8b758f8186c
      - 65979742-419f-411e-8ce2-211223efbe2f
      - 67268d33-9baf-4e51-9f07-a6a53d35d648
      - 68045a37-c5f2-49ce-b8fe-f993527aaff7
      - 69d34cdb-2b0f-4511-8f95-f625c0422e31
      - 6aeb724f-cff4-41e4-abfa-4f50ca07eaa4
      - 6b9639ac-e67e-4a74-be39-d5b1c889dfcf
      - 6c260734-ca3c-4ff5-8c71-6ff6990fbbdd
      - 6fe8e058-fdf5-4a09-985f-a3343605bcb7
      - 70ba0d54-2da5-4fce-8309-70218366e4bb
      - 7325f932-98b9-423a-ad8b-5d8300229407
      - 7402b185-0b05-4a46-b492-6e8fa7ba2204
      - 77d1eae2-691c-4379-ac34-6f0fc5cec0e6
      - 797255fd-0ecf-4f2e-9bae-86503ced806f
      - 7a2019ec-0e9f-41f3-bd6f-abdf81c527b9
      - 824ba9a3-3776-4a23-8d73-1b5812774cdc
      - 86703c8b-2f82-4042-be00-42c23801fba7
      - 86bafb6d-a60e-4c36-8a9c-2250714677c7
      - 891ce13f-614d-4361-b79e-d6af70ac0d40
      - 906b22b5-fca9-4820-8ec7-60b9523411f4
      - 94559db9-58af-46c7-a9ba-4a0d2549568f
      - 960d3117-e7b0-4246-95fb-5bb72e19337b
      - 98d4a29b-2c68-4387-86bf-a159541334cc
      - 9aff2892-ae5f-4fc8-9470-46e6a7478083
      - 9dc6c053-3da6-43b4-b049-b0cf10eedeff
      - 9fe8b619-b07e-4da8-a381-a79b6c5ec9f4
      - aa95a7dd-8a2f-46cd-a5fa-8117aba8b621
      - ab143b1c-7d4e-4d47-aa8e-a0dd133b6b5b
      - ae788e09-c4c7-4445-a7b1-3c42ab761351
      - b1c5cd23-72c2-4ad9-9614-7c698a9efdb3
      - b2997375-e342-49b5-97c9-2ddba160f170
      - b73a4651-6188-4af5-9ad5-1dff1f4020f6
      - b928c85e-dbb7-4a04-9544-f83e6174f99f
      - babd4474-20bd-4207-9bae-8b981621a3f8
      - bed68b7a-5370-4239-bcbb-0e8f6c03979d
      - c08357ff-7d32-40b2-a259-295d7db79ee6
      - c489610c-94cc-49b6-8a7a-10d667f4b251
      - c6b99a5c-8d28-42fb-8e0b-ce7ee4f92afb
      - c74a0050-c537-4b0f-a605-dc28296e0892
      - caf5f86f-9ca0-49f3-89b8-f61541fa87ba
      - cb04d760-e43b-4caa-bbb1-c837bb6b8266
      - cbc360ff-af3e-4d59-9474-cc2ec053ac7e
      - cbd3842d-84ce-471e-9db4-82f233cbb7f5
      - ce29dc2a-7e66-496d-85ea-63376434c587
      - ce867332-0ce6-4861-b633-a459f235b6da
      - d3fa774c-5d13-483e-994d-be96cec7c8cb
      - d41ad6f4-fb41-4ecd-a243-6126e6591ef9
      - d87445b2-4284-4b02-a379-8e5e4878c6f0
      - de5875ff-f97d-4bc1-be42-3c3edd6d41f6
      - e106f954-12ae-45bf-8aa6-e1ceaa6b3394
      - e1c3c97a-dbb1-49bc-b9f1-f19c39cb2cbd
      - e271cf57-adf7-4a9d-b8da-907d71f5f0a5
      - e2b1259e-2af2-4c76-9011-2a5acdf2bb9e
      - e48d4c87-5555-42e4-be91-305171e3a5ab
      - e6dbdbb9-86cb-4f3d-833f-2f1f78fb42a1
      - e7d9cddb-2acb-46e5-b093-9a38b3d8ea02
      - e7fa9da2-8cdc-4fe0-9f3e-fa7a66a9a7b0
      - e95dd063-8db0-406c-b6e6-b615dabc0679
      - ec369ac0-a9c5-4ff3-970c-8f3703d8c33e
      - ecd3d9ae-abba-40c1-8b95-06b74e422f01
      - ed36544a-d3ac-46bc-8595-16474052470f
      - eeb6e599-b6bf-4d0f-bae6-57b9f9b407ae
      - f5deb0b6-7263-43e0-82cb-3298e792a6eb
      - f8f632ee-c2fb-4e63-898c-1a96d1dbdeca
      - f95d189d-f84d-4225-86cf-4b22360f9968
      - f9bcffa3-0c54-4652-8c01-6d21807ae136
      - fd2ffb2b-04ce-4cfa-9dc0-440c8f245d88
      - ff2c0e5a-f85b-4417-8fa3-57aa51695646
      - ee1f975c-be64-4723-bc1f-66a06b614e50
      - 9b307290-41e7-4de5-a338-abc80c78a65b
      - de88fe23-9bde-4c53-966b-b65359fe7a9e
      - f889c139-a86f-4ab7-884b-93a2707aa112
      - cf123d2f-545a-41d2-b308-46bfe140beaf
      - 3e889c96-48d8-4484-918d-38cfbe5e5457
      - 13451b13-e1ea-4698-b88c-1bdbd7712d9a
      - 37b31a84-2a9a-4335-afc9-8da24452ecdb
      - 052290c1-3ef5-4dbc-9f64-2edfd3dec03e
      - 7a5bb4ad-0434-46ee-9025-7847c8b68c15
      - 8c0f2b3d-273d-49cf-877c-0f96815da3a7
      - ef968e13-093b-414d-9307-c3f870bd2f4c
      - 4190d309-f8a3-4633-951c-22f0039c27fa
      - 8f7406a0-b12d-4798-ae7f-831df289e336
      - 16c16132-7971-44bd-ac19-c07ddf5b61f0
      - fdc216c3-69f3-4d4d-b615-f36087852734
      - 65f70fb2-234b-4001-b14e-fad29d8a4f2d
      - 5b2ed3cd-c118-49aa-96f3-a1296151eb77
      - c6571346-66b6-45b6-8ed8-506444565315
      - 28eab467-b6c0-4d29-96c7-2cd4462c44cb
      - bd51f210-ebd8-48f7-afb5-05fc7603976c
      - 859a5567-5248-47a6-b65b-eba8b8bf9aa3
      - 7f94de4e-3758-4d5b-8b2b-cab6665a13c8
      - 782a5ba5-d3b2-42ae-86bf-f0606bbd2032
      - 21be19d8-952c-41aa-807b-259c1d2d10cd
      - fa125cc9-fb93-41fe-8899-de54e1f1e8a1
      - 09339e79-509a-4939-8d55-d85a69e85c96
      - aec3e545-1516-4c7a-8e0b-c6fc1f70af6f
      - 2e8f61a8-e840-4ed0-9572-d43aecb8b12a
      - 32a30219-0198-4c0b-93ee-0c1dc46d8de0
      - 4d6bc78b-ebdf-4de8-bff5-8930718d2437
      - 8304027a-694a-46eb-8d9f-333c3620f111
      - 5546a900-aa0d-45c1-9db2-84df4b844e62
      - f1fecc25-249c-4cb0-b58f-695dfd0a8335
      - 19e68211-e548-4cad-89b2-84ba45bd7c54
      - 5bc04031-7363-4c2b-8c4d-d40216ec11f4
      - e4709abc-e1f9-46e2-8902-bbd1cdcf4f86
      - 9f6a85f6-b54d-492c-87a0-dea00bb9c80a
      - 58c6c89e-5b01-4d9c-829b-af53cd47f84e
      - 5f1bed9b-e75c-4173-9f47-f2472eea8060
      - 65c4ba66-4cae-41e6-a861-e63ce373ade5
      - 3733c0d9-3986-47d2-a4b9-68ecb087ff95
      - cc233973-2230-46de-af93-3e5fa743b904
      - f0c83fac-f433-4a67-a035-1791797e2308
      - 0895887e-bcb6-41cb-857c-b769c087eabb
      - 5dc323fb-6b1a-4248-9a8e-b193e5726517
      - dec578cc-25c2-411d-950c-b9e4bcec0ef8
      - 2f4c5df1-42b5-4e83-9ee3-cfd1a3250957
      - b09e90a3-25b7-4495-840f-a2c800bce22b
      - 9b697a5d-5bd3-4884-8909-6f332ad89a4e
      - 1eae7c19-3872-4a86-b455-e58566384097
      - dfea19e9-b233-437c-a8a6-47b7fae97857
      - 214919a2-e473-49ba-b4f4-decb7063a018
      - ae405ccc-27e9-42c1-9246-507f3be1bdda
      - d38b8ec2-e04c-4d7f-8889-752c246c62fa
      - caddc6df-a9d5-4a7f-aff3-80ca5b485f0c
      - 70baf72f-ccfe-47e4-ab47-7364b2f96958
      - 83d5ac7f-2400-4d88-9ead-2eac2503ea6c
      - 503fb3cf-2d37-4348-970b-f968c0574d23
      - 44739fc1-c725-48cb-8b2a-68a0cc1f874d
      - afc2d3bb-1900-48f1-98d8-089eafa653aa
      - 32a436cc-21bc-464d-b62f-112870f2e16d
      - f79169b4-03a1-4971-b63e-a4bce7c5eea5
      - 273df01e-08a5-4154-8a1c-b2903a8fe680
      - 8fc32961-d44d-4864-a9d4-ab8e0a47c417
      - 220480fe-1f5e-4087-992d-2c362930f802
      - 20b7716c-2a8f-4c17-806a-567efb4594fa
      - 942cef70-0575-407a-92ad-0616aafd4622
      - 839110db-be81-4950-b7f2-ddb038af536b
      - a820c12e-b827-46b9-8146-ad14fc8da9d0
      - acf5583d-bb16-4b3b-bd57-8879a9c78252
      - 56661d43-1e04-41f2-a5bc-03a995e44091
      - b032d74b-ea1c-4866-830c-78d275a4f8d4
      - eb2c912c-fd6b-4eb0-a411-edc4d1993657
      - 682ba8e9-f5b2-438f-9ea6-e237d8df1005
      - d0bc136b-88b5-491f-b753-846ae2711712
      - 4833928d-a9c2-469e-9f2c-724ce81ffe78
      - d6469115-fc02-42d7-9dcb-0d380270a67b
      - cef5c06c-4304-40a2-a8fa-944962eeeb5b
      - 7966f0c4-10a4-4ee4-83e4-c95c8449040c
      - 1527ae4e-42e5-4bb5-b705-9fa754b7cc71
      - 8de777a0-4623-4cdc-987a-05bc11e798ed
      - 18a8cefa-176b-4ebe-95fa-eb65e56ea139
      - 66f81477-b365-4932-b19d-801052f40176
      - 0198b3ef-a5a4-42b8-a215-f604331efb1d
      - 7a0da0dc-dc95-4968-9da4-0949fcb1f4c9
      - 87527101-685e-4ee5-a691-c09c0117f366
      - e4601bbf-2512-4bc9-a1bd-052893c19241
      - 1928aca8-6eca-4869-ac97-e847fcfd9dcf
      - 54e3d983-00ff-4d1f-b879-524697970b1c
      - ebb91986-3ba0-4287-a91e-c748af0cc247
      - 3cecd916-8e82-4338-9c4b-b450a4490b7c
      - e4920754-48d8-4ad9-88e9-01e494f02db4
      - ce3d0735-6ba5-4532-b5c5-1f2afc06baff
      - 680924b2-53ce-4f19-aacf-1f12a0ce8cd1
      - 0a933e82-27e2-49f0-8430-38367cb2a42c
      - 353d2630-92f1-4903-96cc-ea97fcae9423
      - 148c202b-cde3-4791-91b2-50656914b1e9
      - e64d4b1c-4f0b-45a1-b9d3-23ab7bff5699
      - 34d92e66-b9b0-4c7c-a5bd-df7d2957808a
      - 67eb94c4-3ba9-4214-b57c-d0dbebfeb9d2
      - 3255a9e1-55a3-4596-abb6-11abc2b7640f
      - 16800247-51ed-48ce-99df-cbff5dc1010e
      - e54175c6-149b-4dc2-82ff-5fcca438e41f
      - 09812497-25b2-4d10-960a-01aee374512c
      - 7a828e83-2d73-48cf-b423-cff05f768216
      - 9dee114d-73fb-4c52-8056-a24929736f14
      - 829f1b12-68a4-407d-b0ad-8cfd51c774d5
      - 09a476a6-a5d3-40db-83ec-8691158b0629
      - 5287d68e-558c-4310-9e76-a583855213b5
      - a72cde8d-7f89-4f6e-bf3a-3a02e7750141
      - 4a82e6a5-022e-4ba5-bc8b-e5d8ba843cf5
      - cce6b621-2780-4c08-ab90-c79deec4fc5a
      - 880a26d3-420b-4a30-8423-fb3e96040544
      - 2b42fcfe-e1f3-441c-83a9-fdb4ca9a2d54
      - 73931421-72de-4648-b2c7-0a0da09a9eb4
      - 7f8c167b-4a9d-45aa-a4be-7725f1249433
      - 153a8fbb-9728-4adc-b1f6-4dfda358c1d4
      - 60614e69-e365-4e67-a627-a094cfa6b76e
      - 9e676b23-2d67-4a56-85ba-01f1cbbf4361
      - d1c61721-f5ee-4a41-a63e-aee7225e829d
      - 7fe49001-0c7d-402f-ba9a-cb9143f3ee3a
      - 4d8cd9c5-15e3-476b-a529-6d9cf4aa64b6
      - be15d2b0-b68f-406a-81ba-596b41584bb8
      - f790ba50-7ee9-418b-b2c0-12da19b2fc09
      - 368a93bf-13f3-4b83-9b79-7aa8fafb1d51
      - d3a630be-dadc-48df-a90f-bc89caa8394e
      - 649bea3e-4c36-418d-a336-7055ce1e1abd
      - cfd58a08-e539-4029-a546-1e58cc0c2fc5
      - 7796fec1-1dd8-4d95-a72f-a9617b6212c2
      - ca1c7cf5-8681-471f-a150-b2e7a40d25bd
      - e0074a70-c6bf-4295-838e-de49523b89de
      - efa80349-4b76-4bdb-a187-24db2f25bfb1
      - 1882d2e2-8cb7-4d4c-a200-84fae43ae75a
      - 18c83359-6115-450a-aeda-8b2acdc926e3
      - 790466ca-2351-44e6-a839-dbdb0d08de6a
      - f0d6a7a3-f412-4563-9fa0-33c439b72f69
      - d8bad32f-eb91-4025-ace8-b7572489d412
      - 396976a2-9035-46de-aa3c-f882f1657ad4
      - a9b9e95f-9c0b-416b-bd70-6ef69819f1da
      - 8146bcb9-3bf2-4bfb-9c8f-2456a8c8c9a5
      - 3222fc01-4802-4efe-95d6-c966eff65cf2
      - 782f09c8-6429-47f9-be54-6e56c2d231fd
      - 2ae73bda-c055-4be0-8107-fb6d30c66f31
      - af01d2b9-16a1-428e-a0a3-a75902f86bb7
      - efdca181-e8c2-4794-9e91-89a91eee7bd7
      - b16b1301-6b7f-4896-adb4-b3f308114e02
      - 58622d61-4205-4a90-a181-929b3b4a7769
      - 9f1604ad-5255-4198-b4e5-1062f7dfadb6
      - faba31b5-facb-4d7b-8f6e-819ff19cb038
      - 062ee8aa-06a7-44cc-9ac0-0a380d70ef78
      - 69beeca6-af34-45b5-947a-261b0e4d61d9
      - 81fd3c25-70d2-4acb-9a4a-5bb9b4c85a0f
      - 58f4b820-1116-447f-af01-0da2bd0dfa32
      - 7f8ec63d-45b3-4925-aef8-b1774e20ec81
      - c9969775-4a34-4149-b27d-18905ead57d6
      - 759ba677-8ec6-4ba9-a85d-32d563b76fb1
      - f334ff8d-01bb-436d-827a-6d7d9601d72a
      - 3211faca-1269-47b3-9eb1-9088f0929de4
      - fcf57f94-cbdd-45d6-a5ce-5e5f7eb6184b
      - 76f3a323-2aae-4273-b0f6-108a8f846a37
      - c0a9feb4-b812-4397-967a-2235130cb9ee
      - 5b07f02e-a987-4077-9b3a-023aff5c7886
      - b85c4f06-5cfc-4f77-b96f-639d644425fe
      - 6f81aef1-7fc4-4f04-870c-881e75d70ab9
      - 0430bbea-b8cc-45ca-a193-56ae9d72465f
      - 81fdecaf-43ce-47f4-a0fa-c565e836efe3
      - 94633f1d-b6cd-40c9-82dd-278072b09bb1
      - 58fffc93-39da-4628-ac12-4d65be2a1131
      - 72908379-03c1-4c4f-bcb9-4306933d4c4b
      - 0d3d982a-03cb-410b-b402-ec15d0d33d7c
      - 3127dd39-6eb3-485c-85a0-96fa87ccc706
      - 5a99d816-2f81-45a9-88c2-08ef8f535184
      - 7ff4e72b-d627-4064-86ef-887a1f70f9d6
      - 71e6e097-c0b6-45d1-9085-8caa7f7df065
      - f58e84f2-fe4c-4248-a0cc-6b12aaa88285
      - 92321b42-c320-4853-ba9f-de380527f71f
      - f71fd8e9-90d3-4e0c-a283-ee6c38a3685a
      - 890c0bbe-ebfb-411b-95e3-a4f3d4f7e701
      - a3081500-7e3a-42db-b1e5-54c04d2ed61e
      - 472d8ea6-c27c-4d22-9389-424cbc7ebf93
      - ce56c570-baef-436c-931d-47d94ec779b3
      - 26a59940-d475-4327-8530-d728350de39b
      - 3d5f395e-19c8-48c5-ba78-cc848a14a6ed
      - 87f63c81-002e-45f7-a886-9fe067066092
      - 9ed5d733-097c-4754-bf8e-b003ee5410cd
      - 65215236-0db7-44cf-97f3-267feadd9851
      - ffe01c18-4f98-4aa5-bcd9-82e0f949c31c
      - c410a24e-1b3d-49aa-be97-e7d988446994
      - 7ade7725-123e-4c49-bbb8-80a500163972
      - ccf6d9f6-9a9d-42d4-9d36-877eae6dcb3d
      - 5368cde8-60d8-4bfb-89c1-c6482243a612
      - a1e201f8-216e-42eb-a0ce-a681770c007f
      - 9252fab1-8800-4dd8-a9a5-16dc3f5a148a
      - 1ebb3421-95c7-41c6-b7c9-8edbe052c44c
      - 84b18b6f-6e0a-4d5d-97c9-f317a1b28380
      - 6cf004c8-4e5f-4d44-b82a-6f2736ecfb32
      - 9ee574b4-3d4a-4b63-8798-c8b19781948c
      - 7f5db772-f806-41a8-b06d-ce8389542f5e
      - 8225361c-6ccd-4a39-b8e6-5b152ed54dd9
      - e9b08325-95e3-4629-be45-ef5e10fe20f9
      - 624979fc-2b89-41da-8792-d74e5f98242b
      - b5519e44-a999-448e-9a1d-2bf6426ce2fb
      - a8ebc5d3-fcf6-4ce8-8982-675939f16fb0
      - a7e51bac-8356-4cf9-aee8-1548df85b649
      - 87e5dc3b-7abf-455b-8c99-199318aec297
      - 926ddeec-4365-4f79-b004-2bac558d0747
      - 7dfd5e36-085f-441d-8894-cde1c87c08ec
      - bcfe487c-4b9f-4aa2-964b-01c2415e644e
      - ee4e5ade-bd12-4a59-8c43-742b5dbaa77b
      - 1a988e10-3ef4-44a5-9fe3-db16b512532f
      - 45c5ae67-7cfa-444f-85e9-78db330e6809
      - c48041e4-9d99-4af0-8efb-9a4357801a42
      - a6e1e4bc-fdcc-4b3e-b5b1-3b5b61b5d437
      - de63b7d2-d368-4849-99bc-62732024ec9b
      - e50b84ad-943e-491c-838f-0ee422806a3f
      - 78616fcf-f3c2-485a-a7ad-ec373e5e447a
      - 205eecf8-d16c-4e47-a881-064c8dac122f
      - 928237be-778c-43df-a6d1-6102293f90d8
      - 1c023c07-921c-4c15-b020-dba6413d1442
      - e31fd715-a8ad-411a-ac85-b2bd501e975e
      - 4abc1f72-533d-40f0-8532-1ac0847634ae
      - b1f526f1-8da3-4096-8186-d92c9536bf34
      - 1e7636e8-d722-46c7-a1e0-4d09fdab663b
      - fd55f961-2db2-4c26-9bb8-46ed380cbb5a
      - 8b0fd902-fc07-45f4-b542-751e881fc448
      - 4b32995c-980a-4279-8402-c0b56ce1a629
      - 8c24e5df-6aa8-4e45-a155-8fc28c39966f
      - 6f419dc5-5eda-41dc-b54b-8c3683a9a797
      - e7f45f2e-2b70-4cea-af1d-878079b81c43
      - c9de5430-3afc-4532-aaf4-0b0f90214faf
      - bd0286f1-a34e-4b03-a2c2-243c94e5865a
      - 7e81f0a3-6ae0-4971-9d39-56eb3a1f8d90
      - 87dca7a2-a44c-4ebc-9014-02a9783d73c5
      - d182e111-d665-4bfa-99a5-462f077ec3f9
      - 56b74728-5b46-486b-95b4-4353fc885653
      - cedf99e0-780f-468c-928f-cf521afd4389
      - caa6c6ee-4e9f-486b-8b29-7e3c81c6b066
      - e25cd5a8-dcb1-4918-ad17-cc3ab904f0bf
      - 760a0b7f-37be-4cc6-a919-686e09c08cbd
      - 4db415ce-2e16-4fe2-9db8-9ff221f44fc4
      - 372fd30d-8046-45cd-b7dd-f8b24ebf263a
      - 0a35eb05-681b-4044-a1d6-f90c34032d72
      - 7deb38b6-f971-4baf-affb-853fc2e685ed
      - fea3a151-6d91-4a17-8783-f3f4e8659677
      - b69b6cf1-8e85-4cf8-a395-dd6ab6fb8100
      - bbf2ca5a-4736-43a2-8f3c-50e05508466c
      - 1bddbb17-2f54-4b85-93d8-0e120180570d
      - 6482c64a-60ca-4388-b456-927f242d11da
      - 8eb3d0b7-20f8-4a0c-94dc-a1138203f403
      - f2ab74db-bf9b-41a2-b82d-d04157e79cef
      - 6f40073a-4186-472b-89f1-e34bc51bf274
      - 37b6382d-e81f-4009-8682-cb4b67d6296e
      - 10fd2f1b-ec92-4b8b-8a0c-3cd5a32169a3
      - 9230a935-da04-4c11-9918-0add60ccb867
      - 13a1fb7b-cb18-41e9-bc73-795103b7072c
      - d7f3e0a9-1b82-4804-b4e2-a3f767e01dd0
      - 7a71cc17-423e-438b-8996-1c71c045f264
      - 2f4c2c2a-c492-4b14-b8f9-692748dc5b2c
      - 085b80c7-485c-45bb-895a-bc55aef85964
      - b3073503-ca84-4fd3-80b8-c1527f0009a4
      - 8c49490f-f630-4356-9e76-7704a31ab2f2
      - 905013af-d685-4684-9f07-97827799927c
      - 1c75b002-962e-4529-86d5-a81bad9810f9
      - 840229f4-f409-46f8-9073-aac3766acf7c
      - 2e43b75a-3067-4f46-8ec6-641256a9bd76
      - 48773521-6e76-431b-b13f-26feb6bea52f
      - 30514759-c9d5-4e96-96a8-a2a454a0fbc0
      - bc8de5c1-cbe2-4a1e-bf04-e64d0ab74675
      - 0895a922-dbcf-48e9-b584-a8b20a947e32
      - 12f48ae6-c561-44f1-959f-601e4165f9fe
      - e3f098d5-de18-444d-9e0b-08904553f29e
      - c72d926b-165e-4e4b-aed3-a02adfbf2da3
      - fe7abdd2-8c15-452a-b493-84cb6a080431
      - 814b6430-bb6c-42be-b71a-c0dac2829ed4
      - b5e056cf-23ee-450f-8c8e-1c36649a7210
      - d24b2a32-d504-4f4f-8744-43922f65c5b9
      - 76b49638-8464-4bfa-bda2-32a5f6f25bd4
      - e897bc43-a93c-44c7-bec0-0b675d1947e6
      - 1b4f63b8-ae27-4e1a-95dd-efcc3c396f0c
      - 74b8934c-a781-42fe-a47a-70e43bbc2f0f
      - e6be2e8c-0ebe-4220-8ea4-e2ef1cb9f064
      - 170b5c8b-549a-460e-8236-9b0825af15ad
      - c1b1167b-e33a-444e-ad2d-cfb6c4a5b6bf
      - 365400bd-fa7f-4213-bd5c-95caad6808b2
      - 52022d61-f59c-40d1-99c4-7b3fbb5adde4
      - cfeac293-d57a-4e56-9d03-85721bc2b53c
      - e83347c2-2529-4887-a419-9eedeeca13e4
      - 7ba5eaf4-cd17-4eb3-960b-efb7819cebc4
      - fe43096f-ecce-4e4f-ad8b-3afe18db84be
      - 0ce23e27-cb3f-46dd-a40c-031f0c848147
      - c3e7180b-c4bb-48f0-8a7e-1535e9d5f27e
      - 04982cfe-9335-476b-a8c9-bf8ac7cfc143
      - 173f1dbc-0de6-49bc-9815-2d8297da28af
      - c44967af-6d13-49fb-b863-88b408335a6c
      - 66f05cd3-09bc-4121-af62-372594b04362
      - 3f5e1a05-ca6b-4845-85b4-80adaff807c9
      - 90a7e04d-73da-4cac-8e69-1c9b24adf907
      - c3d852a4-4c1d-40f2-a16c-2b89773c2dfe
      - 9894d7a8-9427-4065-9797-a501e8d6b7fc
      - ab32728e-068a-4d22-8eb4-83660d87f028
      - ce59e4c1-f81a-4b6f-8ddb-bce034dba929
      - 267cd630-765b-45de-8708-140eb6f96b68
      - 1621e5c6-8a79-49b0-9511-8a90d7339415
      - 0a3ce1e9-21eb-425b-8a61-5284aac05d66
      - 177b37c5-d121-447b-90f7-33331c7b2083
      - 8d1eb6e9-3d8a-4077-b101-1d3358ab5e03
      - 05df1a6a-a92a-48d6-abf8-840e9949c047
      - eb6f4c78-1dc0-4092-b54a-da5cdc89a6d8
      - 4cd9b4cc-d02c-445f-a58a-221820e3161d
      - 80f91481-4b01-427b-8d12-6058517a3920
      - b0c1f074-d125-4d4a-ae38-e6adbcd00a58
      - 5d9c58d7-5b80-4c69-a1a1-53cf3c65501c
      - 41f6c3d2-bc99-4e28-971d-60d7a4e3fa14
      - a7d7d1a5-6f04-4d70-8e77-ded06c5d057c
      - 7f2bc27a-d411-464e-b3de-33f65fcc9736
      - 13f46c03-5a0e-41a1-830a-2d6708d722fa
      - 0ddc6ee3-11d2-4210-86c9-e0e5aa17198b
      - f2894a80-ff8a-4c05-a137-3efd6e9be836
      - fb9392e7-236f-4bc6-9e9d-afe80b9cd230
      - aabc1664-8c3d-4762-9548-345a9d462866
      - 2209f8fb-dd2f-4331-acfb-830e0b072bc2
      - 0a046e71-977e-4179-af89-a8f7508148c8
      - a829f4f6-0071-43a1-8985-112b8db81f5e
      - 3990814e-829c-4c85-8ca8-26eded862a4d
      - 1945fe2d-6259-4973-b904-1898f8d3e546
      - 25f35fe3-0b56-4c3f-a7ee-ad521dbfeb3b
      - 1becf65e-2641-49bc-824f-714f8a556208
      - 301be4e9-90b7-4b1e-a313-823dcfcaa9d1
  Subgraph-4:
    id: "4"
    name: SALES
    steps:
      - d240a507-6636-4acc-8306-56b8c697d515
      - 330aa0fe-953d-4f87-bd70-e0bec585e2d9
      - 5ec71fc0-b69a-46a6-b2c8-3168bb145256
      - fbef17d2-8394-4fd7-9fc8-0ac0a8e926cf
      - 7bffbb0a-febe-456a-ae0b-34b7ca32b531
      - 055fff0b-f278-47b4-ad79-03fef1d5e8c5
      - 498056d9-fbde-4815-bb28-9ea24983b509
      - 30ddc928-25c8-4ec5-940c-f3c271988839
      - 12eb8b12-ad10-434f-a404-10719a7687bf
      - 7470c2f7-a5a0-4b39-93e5-9e8e49369000
      - 5595c0ff-edee-4021-b6a9-c11f3aca7d44
      - 6444ad3a-398c-410f-852c-b97692d90e11
      - 71b145ba-337d-441e-91b9-e398e358ddc3
      - fbb0a6db-3840-40a4-abb1-58ae009c6899
      - a799de79-7339-4211-af52-86a23d053abd
      - bd00b7ea-87fa-47e3-b329-8325780ec80a
      - 7a67bcda-441c-41bb-9109-4c5ebb08fac7
      - f9f1de2f-e234-4bb2-aa6a-e11a1ef93583
      - cfb95ae6-4c67-41ea-82db-c7c8e9d9b391
      - 7629d4b3-0ef5-41f3-ba50-a58c44ac10d1
      - 013232b9-dab9-4d31-bd52-77ccae497e61
      - 62c9e1e6-7990-47df-b455-66b6de9f46b9
      - 18efdf59-ef5b-4b44-855d-4c78e4f8f274
      - d628a5c2-946b-4e6c-b4e3-8fdde9869154
      - 4861d90f-f351-49ad-8a0d-00257910eadd
      - 058820e7-73c6-4ba7-afc4-4c10668bd42b
      - b4384114-ac6d-4efb-a703-107a55cb4ce1
      - a944033e-0079-4bd1-8ac8-77cb30e087a5
      - 592f6a1b-b9c8-4bc2-9b9a-71689f40dd83
      - a260dbe9-645a-400e-bbcd-2c04e54ab424
      - 36651c9f-dd7a-4c25-9faf-17024de85bec
      - 9203c344-fd7e-48fe-9e80-0586511ea725
      - 21839574-c7a9-492e-8714-b13d4812041c
      - 12ffc3f7-a3e3-4eb6-829d-f932e536afb8
      - 03eb1f72-1e65-4d35-b04d-57212b237024
      - 07a61494-ef9c-4144-bfe4-cbd7bbcce475
      - 0a9b1b53-a2dc-4733-b46e-c103e303d02e
      - 17006bbf-98d8-4b05-b2c1-7d1999ed0d99
      - 1b7cd9c2-738c-4d6f-beec-6eb73f61220a
      - 2d4058bc-e6be-4247-8c31-afd6b1e2dc79
      - 31c4a7ad-21c7-413c-a12f-fc51ae845038
      - 37a09dc5-4f0d-402c-8bc7-f591117bb394
      - 3eea2d86-c145-4d37-904c-947e2c826223
      - 4da143ee-d17c-4bcb-94df-78d4433898cc
      - 4e308917-6b34-450e-869b-3915e0cd0f84
      - 501807f8-2fd0-49cc-9074-2a2ccab9acd1
      - 54cadaaf-d47d-4502-951b-3a46f381279b
      - 54f826c5-d752-4ed9-8999-d165db066e29
      - 552572f2-33c8-4a44-a2e9-cbd8f730792d
      - 5611dae4-4f58-4ceb-ad8a-348305e0fa18
      - 570f220c-e87e-4779-9c58-ec0dfeb59645
      - 5be8b6aa-c45f-4d47-9506-008e8e5c746f
      - 72f58f02-b607-4ede-9130-dba6223f5db6
      - 73b04ea5-59a0-440b-937c-678e2037891f
      - 76b18c54-9db8-4498-9747-dc4eefea86da
      - 7c19a0ca-d024-4918-83ee-8a4f069fb1bb
      - 98b08145-5423-4cfd-917e-709c376929ea
      - a7807d2b-6e8b-45c8-9b4d-b4f8347be048
      - b07d9e2a-0f2b-44f3-b08a-9871cf4a58f5
      - b68471bd-82c5-4ffa-baa4-2ee52dd60877
      - c695117f-c249-441c-9e97-1c2f75014138
      - ce1584b0-47a9-4a5e-83e9-4808730f474e
      - d3b5062a-1336-4198-9f54-8aeaad309e32
      - e477333a-ae4a-4111-be12-0c283347c2ac
      - eeea0f96-3208-4920-bc46-279331ebe85a
      - f2233198-fdb6-4581-ae5c-5a0bb12a5746
      - f3450eab-afcd-4a25-b3f9-9eb9fdc34b42
      - f484fe2b-c0fa-40f6-868f-ef08373fc36a
      - ed564c9b-4721-4c47-a7c4-f1abf820c198
      - 12bbe88e-41ee-483d-8d84-4705b6ec5caa
      - 6263b178-7041-40af-834f-b81b5129dd8a
      - 058ff3bb-a6c0-4e46-9a7b-00f474562105
      - 24b4c236-c1c3-4d03-983f-6d366c7415cc
      - 801825d0-c589-4307-860d-be3e78ac3d40
      - d878181c-f5d8-4a83-a2cd-d646c61c5aef
      - 0ad907a3-1e35-4889-a34f-f46e0151c628
      - 7f399319-ab57-4785-b05c-24fd352f88b4
      - 88e2fae1-b640-4156-abde-95ce6cce697e
      - 87ed4285-938c-42a1-a013-9b9ddf80c373
      - 7a6feebb-f756-4770-b3f9-714933b28c47
      - 6c3fcacf-d8ec-40da-b41b-ea5e739b5f93
      - f9331fe9-aff9-4b1b-807b-0ec480ab9d77
      - b45afcfb-efe5-4632-aafb-65e7e1f0a1ba
      - 27d34643-8d9f-48d9-afbf-1131a9111c77
      - e06cb400-c629-4afa-b23e-e88653996de3
      - ecb6dae0-fd1e-4a6d-8ba7-065fa9d892af
      - a478da78-1364-4369-90b4-032f8800d02f
      - 6eb7d820-adff-40be-8320-598a13051eb9
      - e0350b53-8a99-44f6-9bbc-00044ae75b64
      - 34b38174-c7fc-487b-822d-8f793eddd820
      - 34c8eadc-8aa3-4de4-acb4-47c553077f12
      - edd78d47-9234-44b6-8e5c-d981a69da815
      - 25e037ba-61e5-4e90-abe5-ebcd58c83693
      - c2a9e453-1e27-4ae7-a6e9-7dcbc48a1320
      - 638b8fe1-9225-406b-ad47-e395673c3c0d
      - b4afd35a-5edf-443c-bdb4-ec4a3afed28c
      - 03a24850-038b-4b01-aaac-f64261003010
      - a81bd4e7-2d90-4c7d-82f7-c243ebbaf039
      - 83ce89fc-4b84-4e91-a1da-c9dd8155f270
      - 7ae08f96-ce6c-4e7d-b6d4-8d02cef7cc57
      - dc0db076-359c-4cf0-95d1-ce43e0c5ce18
      - 5e6c85ad-e97f-426e-a08d-9f24d751586b
      - c565d7a5-2560-486d-a892-711edd21a20b
      - d9994210-27ce-4b2b-93e5-3f2f1fce7199
      - 42096f0d-5900-48c3-89b9-f9cb52207f34
      - 475f1e11-cdc4-4a13-bf79-ea71aa9dc34b
      - a93a1051-3b98-4622-9e2c-6e2f5cf8ded9
      - 85a6d91b-58e3-46ee-b525-a5983745f6cd
      - c27dc253-8ac9-4c46-a625-06f2ab1aa5bd
      - 6aea2f21-69f8-4ee0-a07a-2c9ba46f5a32
      - 2be7ee98-93c4-42be-884e-749a946de6d1
      - 9e46bdae-d828-4170-a17d-2952fbd19e4b
      - 76aa735f-f182-4b51-8fd3-24cee43c2ab6
      - beba819c-a143-4714-a6b9-600392cf8ca5
      - 12d82bf5-6800-44e0-b229-408bec599f86
      - 7bf75398-1f35-4f6a-bd4b-3a584ed102ef
      - a372ef16-fda2-47f6-a1be-29900c2847a8
      - f01d23ba-9c80-481f-b633-c3048c6c9682
      - 36f5e15b-2c7e-4fcd-a650-9d24651b01ed
      - 0ef3f34f-068d-4972-929d-f2a48828c45f
      - 192c5be1-f8b9-4384-bf74-88134794d418
      - 96332449-ccd9-4af2-a554-6b2f97a5c36f
      - e791aa79-b716-484d-bb70-f0fba1f3022f
      - 44b15cee-7a14-415e-ad30-05b05c93ab3c
      - 12dd95d9-88c8-446d-a2aa-f225c2d421ec
      - ce84c91d-31a8-4e9b-a9db-8c86cc8bd3ae
      - 8300dedc-48c4-4676-9165-c0d6c3c478e9
      - 177ed466-0f1f-44ff-9b18-2f69b6b9690e
      - 5d78b684-4f8f-4c4b-b91a-40a7b609b4f4
      - 21a86058-b10f-48c4-9f14-0026cfd7d99d
      - 51949385-994d-4813-b25d-1c8c9e309cd0
      - 72879a5a-4615-403e-ac1d-53b3f5954fff
      - 352568be-5413-480b-9dc5-a967f2a3e12d
      - 25d60c55-2b19-4b3b-8bbd-d1bff1dda287
      - 7e8df8d5-0770-4c72-a3a3-662dfdbe94d9
      - 1919b312-93ef-4b39-8521-2e80b74dc43c
      - efd5b602-a6e3-4099-8f53-78a4ccd30f8b
      - a8412336-3e71-4a5a-99b9-b86bea6f7bcc
      - 0c84dfd7-9e3b-4d21-a56a-294d0ce8237d
      - 86f81208-afaf-456f-b956-a4e7db6e1dcd
      - bb83100b-d23c-4d4a-897e-9bd237392054
      - 641280fe-a781-4bfc-8a6b-6d0285657784
      - 087ba7f2-a94c-41c3-9518-8362b6814f0a
      - 96e3f78a-8ba4-448c-989b-09c87b21e203
      - ef4827c9-83d1-4b71-a7f5-5f1f4a1e6c88
      - 92a5005a-cc69-4ff3-80b6-47ecbc15b428
      - 0273d207-3711-405b-8d50-edd755d67bbf
      - fbe4bb2d-04ca-4fe6-ad0e-3bfcf5cf3c52
      - f1e18035-9a31-4d9e-89b7-56ebc7996574
      - 3c27befe-f85f-4620-9aae-3d531ab57ccc
      - 0f3f99b8-2f4c-4e43-b02a-e12749ebe766
      - 9f2b9cc9-3ec0-45b1-9199-262bc6ec1aba
      - a3544a37-5c37-4976-9fc9-7db5406a2f64
      - 22d71904-7e64-4b1d-b6df-6825829826af
      - d0d65f78-bd61-4b0e-acb6-0e275090e156
      - 5707f6b1-0493-48a4-b667-ab0cf98fb959
      - 3d515bd6-c70b-4d7d-8271-12afe1e4ff9c
      - f2f041c1-e369-4a42-80e3-461f8ef5b697
      - 656d9c06-cf48-431b-b77b-0887555b1726
      - 13d18470-d160-41de-96d9-a4e8c8ee40d9
      - 9b1f72ee-4abb-4bdc-b94a-395e07c23d49
      - 1d894945-c233-4f6d-bd07-d3423bd5168f
      - 6778a60f-da0a-439b-b915-fdf331b24ce0
      - fb80a8c8-6d56-4c5a-8d99-37111bc39414
      - 1da1fbdc-00ea-4dab-8f8e-b7891375e495
      - 152a7bc7-afb1-44a4-9e69-9b31de351ab9
      - f8fe6223-8054-4f12-bf5d-063e67f7b9e0
      - 35e3f79d-5664-4d15-aea0-83286f842f78
      - 17883b20-021d-49cb-a332-c534655b6209
      - 4f28f509-ec18-416f-b892-b61cddfc5bec
      - 7b2d1e8d-4237-424c-b243-a2203588e128
      - cb66c5f7-aed8-4662-8f3e-104afc4cda1c
      - 55257ab1-a83a-433e-80c2-0cb6166b943a
      - 36c53361-c974-4a39-a769-cb23c33424b0
      - fcff4840-7fec-4f6f-a2f0-ccfa68902a2a
      - f4d984d4-21c8-47cd-b691-b7df7ca7815b
      - 20d843f0-b1c4-43b7-ad5d-7f63ac09764f
      - 4631b413-33af-40a0-a69a-0f8e0ff29ace
      - 73504480-6d1a-4eb8-a3ae-5aeb132c5c04
      - 6a428547-344c-4982-bc31-ced8cd383c86
      - 8519249e-f3a5-40ce-86c9-f45cf73d841f
  Subgraph-5:
    id: "5"
    name: WIDEWORLDIMPORTERS
    steps:
      - 01398269-4477-4f97-baa5-a13f66a5570a
      - 015cdca1-d165-458e-a6dc-f00bde8ea694
      - 02944dec-4d50-49fd-a0da-dc98a046bc92
      - 0770cae5-fbe4-4745-9ffa-8a495f5975b2
      - 0afcc1f2-ebd7-4e41-8092-a0ca5ef3c6fc
      - 16882bfb-941e-48ba-997d-5a9a2f916f12
      - 1dc63aef-aa09-4981-898f-1b9f246cab1b
      - 1e0c03f9-43f0-4bad-b688-4b51d3ffa0f4
      - 28fd0874-0edc-4b05-8246-102553ff4fd9
      - 292f51c8-07be-4a69-8dfd-79594f20fbd8
      - 2cfe482d-152d-429f-b685-6b8b13569394
      - 2e6d608a-80d7-445f-beba-6df92bb9c5e3
      - 31170955-0987-4e8b-a87e-b91c3dfaec26
      - 35622c9d-b68f-4265-8761-1e0ed896dbb7
      - 36d1f8ea-40a8-4ca3-bdd3-ec9d9f5b8b60
      - 42c76b82-c03b-46f6-bc0b-839679f922af
      - 446ad470-79f7-41d4-8092-39c53a779e00
      - 50407d12-206e-4b67-b2db-9c24215dd220
      - 583e31e6-190d-4a1b-9eae-05de5cde7968
      - 5ac2f140-b52a-44f4-b021-8f8b7a8d72da
      - 5b6bebb2-3ca8-4bf9-b41a-dbff8cc7e9f5
      - 62ab0f44-afdb-4cbd-becf-7a85e05498dd
      - 64d390de-817d-46f0-91e0-23458301cb47
      - 681a5245-d078-4b7f-8ca4-1a2befb8e9f3
      - 6e89691d-5cb2-4cd2-b41b-8e4209856889
      - 6fd48ea0-c598-4d7d-9001-09cfcff8f683
      - 7bca5da4-eb85-4995-9f89-f0f7c5893a1c
      - 7e225a1b-3d19-4fc6-90e5-843910288688
      - 85831fa9-12f8-49c0-9d5b-4c59f1ffd28c
      - 8e0c71fc-d45b-4aaa-a5f2-f54f4c3a1b4f
      - 9b80a05d-62e6-45e2-8e22-14fc3a711b86
      - a912f6fe-dd5c-4419-81a3-08e82b01a248
      - ab7b06bd-a9eb-47c2-baee-72ba3c7d91a8
      - b49f8c35-cd60-4a6f-aa30-c187c3d49d8f
      - b70e8e02-9808-4a59-a4c9-7d916223d96c
      - b7f51f04-3c76-4ad7-a091-23cc48def346
      - b82ee7e4-82a5-4809-9c27-14c492c1f261
      - c387973f-de54-4d16-bb22-c54b244ce81d
      - c95cfb55-922c-4b84-a004-aec61e242965
      - d60b94c3-2a55-42f4-b962-19719433432f
      - d7fa3816-f47d-4a13-bd4a-4c684de13180
      - eb4335d5-4a3b-42ad-abc3-12cffcdf3e5a
      - fbaa1c29-4234-454c-8011-43764039a4f6
      - fbc6d566-aeab-47b1-90de-af6d5bc07b1d
      - fc07913b-be64-478d-93bf-d8ca0374bf3e
      - fd33da1d-41e4-470c-a025-5a17458a6eca
      - fd3d9b5d-b2f4-4305-90bd-f7a44591bd37
      - fe7adbef-8ed8-4ada-a957-b99ffad84cc3
      - 0c839bec-38d9-4546-86d3-237916dcc23f
      - 12307025-a964-4cdd-abd7-65bee545ede6
      - 1a7e95d4-3c8e-4d58-8124-05fb4ab178ab
      - 1af50b69-6c99-4ecd-a1ec-899b9a4b43f7
      - 1b4141b7-ebd0-4bfc-9ac1-d1a0c1d8c1b7
      - 22a553ab-85b8-4aa9-a377-ba0dc3dae441
      - 32abdc9b-69ed-4145-b02a-ac1410ecf052
      - 33ddb5b4-8fb8-4732-9279-36a5f31ec518
      - 3dade1c3-b778-4730-851b-acaed5429f8d
      - 3e6252e2-2bfe-4612-8592-4d5a30b84986
      - 3f160136-bf1c-43ad-8c88-46df867c8865
      - 42a12c5c-fd61-4a58-bb39-8df029179287
      - 4c7d0ff4-3928-4368-8ef2-70a2c40dd7ad
      - 4e82c9e9-2a36-41f3-a299-a393434b5ca4
      - 4fc9b44b-cf08-4177-9770-964ad0d4351b
      - 665bd9b5-6059-4e66-a0e7-c055d2aef8d9
      - 683bf3cc-b7fd-427d-a485-bef75af11589
      - 71764306-a68d-482c-b689-03b6ae83292d
      - 739d76ab-fcc0-430d-b9f7-10c21b78e6c2
      - 754fecc8-637c-4407-9fc4-16068c14f2d8
      - 7b5729f5-024b-488d-b1ea-7e12a1cc3d94
      - 8680f5e3-9428-439b-81f9-25ca62a5401d
      - 87356c49-b994-4b03-a266-660e51c44c15
      - 88bdb143-8db3-434b-b06e-35d6db84b735
      - 894fcab9-6b4b-4426-bf6a-a2f295c75079
      - 8b641a51-9df1-4154-a9bd-e3f78c99af66
      - 8cfefdc3-ae60-4c59-8389-1c5003de7427
      - 900786e0-1b55-4d91-9a2d-cc91d40e93d5
      - 949d6202-e44b-47cc-9897-465c73eee3a0
      - 9a3776e8-17ee-4275-a8d9-66d204c46540
      - 9ac396ad-bb1b-4db2-9bba-484909108564
      - 9b4aeb2f-66cc-4829-b881-c12c8739f2b8
      - a0098c89-6a93-4b4a-b88c-14259500ad7e
      - a13d1df8-5513-45f9-9a7c-434c34951f2e
      - a6d22354-8827-40dc-9395-725f20516957
      - a973dc64-e55a-4d19-8789-251563dafa56
      - b796e82f-c91e-49d9-9302-9835cb2977df
      - b7c0aace-f1fd-4226-bb1d-16c086cc848b
      - b8d0f657-00d7-4b95-ac64-1e36b3ef9109
      - bfb41813-79a8-41ce-980c-319a343308ff
      - c5196690-f3e9-43b6-a6cb-8d9dde6fc784
      - c6a9ce04-2d2b-4917-b1b7-8fed496b4ffe
      - e1b0d532-b0cb-4daa-9c16-3ef76e3ebb37
      - e6f32cfb-3107-448a-ae4f-a09998a3b1ed
      - eba4cd77-ebde-4d6e-8413-3561b02810a8
      - ee44808c-5dc5-446f-959f-ab69f3289346
      - f49f5b1a-be92-4eb0-9384-171a0be47d25
      - ff900fa2-7117-4d8b-85fe-15408117c767
      - 23c881f9-a4a6-48c2-9c22-f67c691a81ba
      - f8b5f1cd-e195-40a5-ac49-bf9532cc3a42
      - 029fc300-aa31-493f-b3c9-65491e04b9bf
      - 703c28a5-4c13-4374-8a45-23e2c07463f7
      - f06ef21c-2573-44b8-80b5-274f63d2c588
      - 2bec99c3-178e-44a2-9b8f-d636d775f695
      - 46ed285f-3e13-4ee4-9edb-0e60b7b9a2c8
      - c7846257-9fef-4258-b449-1816fd7b3b5f
      - ace608c9-0126-429f-b68e-06d29b3b6347
      - 39fce3db-c1b4-4b95-b4b3-c1d78d4248eb
      - e945f128-948e-4f56-99c0-d8c248bf262e
      - f4f9beaf-ced3-410a-9fb0-0956c125bc29
      - 8f1fa9a0-8550-4e1d-bd6a-00a8736a67fb
      - fab5bd9e-fc40-432d-8219-1da22c070f93
      - 0096d346-05a0-468f-a7c2-13409697ebeb
      - 4da93a5b-6621-439b-92c8-e18ca5a4a2a3
      - 1c0cc8c8-71b3-4e47-b711-c1d17999f98d
      - 59e71782-3097-44e4-9c29-2e87670fcac9
      - 5f6efa86-b6e1-414a-a170-848bd9d6f42e
      - f106f7c3-41e8-475b-8828-0d4c4969c54a
      - a0fd5123-1de7-4c7a-8bbc-602bea8c8168
      - 213013f7-23ae-4718-af28-b9b5ae5e8a17
      - fed1c7ae-ca40-4b85-8bd9-015c5de44014
      - 974f9646-b1aa-4f2a-b676-d6299e552670
      - 7a68244c-c4bf-4a6b-91fb-befcdadd56a2
      - 86e9f6e7-0a1c-4af8-9674-70b8bcecdf17
      - 5a717efa-d771-428c-83a7-a8f9b8ffa552
      - 73ab1b54-fe8a-4230-b4cb-426a8ee5e838
      - 4e2c0228-9a2d-4a59-95e1-4b51df8fa967
      - 343324d1-6768-40ae-b731-1f1b8354cd65
      - 6c5b16a6-a7e2-484a-a5cc-17b3f12c09cc
      - 62b99a19-1476-43d5-a97a-fa2f43ccd984
      - e8ec595f-34e3-4abc-b053-5dcc32e23460
      - a696637f-81c4-4253-a67f-c08275a893aa
      - eac2cf39-0a56-4ae0-9bdb-82562fa2654b
      - 4d24819b-ddca-42e2-a8ff-3a43df7d9183
      - 127ac1d5-e13a-4649-8261-7646114df47e
      - 923ad484-da4e-40c2-a62f-22f2bd7b5c0c
      - f58ce7db-46f6-4961-8ce3-1f909466d642
      - a233edfb-af35-4bdb-b421-ac7290066ea7
      - 334230d4-50ad-41f5-89a4-db9f2f38b4d6
      - 155e144f-2249-4e00-97cc-68ae54d6f040
      - 3ada616b-68c7-4dbd-a890-637c6f6327df
      - 4df278c8-5eca-45a4-a40b-e7ba33b0b2ca
      - c06138f0-a076-4d3a-b5e8-3a5410e3ea99
      - ce084b6d-c14f-4da2-ac6e-8f8084f2db9e
      - 179d8099-5eaa-4efc-9f51-1336c6d4612b
      - 9bb87677-6387-4e65-a5dd-ce08cd813441
      - 27bc4962-d4ee-4a38-a9e4-0ab9bb952e0d
      - ef99f7d0-e5a0-4f64-87b9-6bfcf592356d
      - 9176b8d7-a014-4bf9-8afd-ab989ac10c69
      - be6dd6d2-80e1-422a-b10d-bb35128d7d1b
      - 61547b90-511a-4d95-83f1-b1fd3a0565dc
      - b6c9f6f3-ad13-4d38-b227-64757154335b
      - 0cd1bd19-e794-4a73-86c4-193b4cd77ed9
      - 3d5772b7-e970-4019-9bcf-b028a475d9af
      - cf7581d0-6ee4-4819-9430-9ac7de9e2f3d
      - d18a11a6-a946-464e-9929-03cb7b43420b
      - c8e52263-111c-4694-8b3a-b99e8aa73105
      - 30035df5-acb3-4bd5-92ac-0216f91d12d8
      - abc1573a-9b1c-4616-9e79-c39cddb6be27
      - 15d98c47-f962-46b3-a3ba-f8e03542a098
      - 4aa2f698-1ffb-45af-8a7a-110f706e8e99
      - 5f42c04f-fb39-4fea-8d7c-40a1187420e0
      - 9c1b38c1-9260-4c1f-991d-3fa1ce86e996
      - f8d80ba9-5c16-4a46-a9c7-1b5570c51a41
      - 4bfd593a-f783-4970-af5a-05f6f7f2b7ab
      - 587a75ad-1f83-4da4-a0f0-70f04fbe48c4
      - 1b8f0ede-f218-41a7-9de1-c44007a34470
      - 526b6c2c-2f44-4503-a258-ee65fc9f2e92
      - 2517724e-290f-4dc7-9825-c5b5cef5a0bf
      - 33d59c59-c2be-4089-b702-fd4d32123a68
      - 9c0b8cd0-586e-43ef-8a52-bddd96ea1a35
      - 9dfe2882-674c-4bdf-8803-dfe56fb052f7
      - 52875a64-fa7b-405f-a61c-d37c0206d220
      - bb922393-a036-4873-a6f6-95b97173a861
      - e1ace6be-2d4f-415e-b959-f4de4492b7ba
      - d796885b-a552-4190-9c88-592396acfebf
      - 5518aa77-c617-44cf-a61b-6206bc700714
      - 6d4ab102-f36a-438a-a2a1-036f0b9fbac0
      - 88c86120-1f16-4ddd-841f-eb296fb146fe
      - f82742ed-b448-4a18-9328-c237128798bc
      - eff187a6-bf62-4320-a792-ed544f357642
      - f9b9ce13-b8ea-4b23-8bc1-952c9a3c0075
      - 11278346-56ea-40fa-a2c7-e96f436b1b30
      - f2733798-7cd1-4a4d-b2ff-1a282f00e1cb
      - 4a993cae-a32e-4d72-b4c7-d6f5a8185472
      - 2750515f-e0dd-4d6d-b85c-edfe00aaf811
      - d74f8fc0-0a33-40ee-8a94-fcf69be489e6
      - 5a04d8af-f84d-471f-9d1a-66edc2aee182
      - c34ec2e1-2778-46bc-b419-3f7b982b69e8
      - 61d8401b-754d-4688-b79c-bf28fd73a10b
      - e5235bfb-b66e-4691-8603-83e728dea2cf
      - ad081245-da3c-4e80-9019-da018afa48f3
      - c1058ab1-0c88-43a9-9447-6231f9e51441
      - 957c7ff6-de59-4e96-8634-0274fccf5cbe
      - 4e966b44-96b5-489f-a9db-1fc9a7d79efa
      - 7aeca14d-6cf6-4d69-8685-44afab834bb4
      - 66fec23b-64ed-4a13-9807-a70bbef1e0bf
      - f079bfd9-7489-4b3d-bf69-694d502d8db5
      - dd4e0dd0-1ad0-447e-9252-6b3f8ad4ae1d
      - 0573293c-56bf-4fb1-a050-ec8d4ee20826
      - cf44fb64-b2c4-4581-a0ab-407f9043017c
      - aab4b60a-e188-4e07-91cf-f2b95eec96c0
      - 544fddcc-2b69-48ea-a18b-107fefe624af
      - ebd06c6e-3bdc-4b81-827b-6f875daa7fa6
      - 96c414ab-688d-45f0-9b3c-f8127c30fa9c
      - d9a779df-de31-48b0-a016-2654b5d240bf
      - a6a1e11e-db59-4077-bead-015a78b5ba2c
      - affa5f46-496b-4945-88b1-ea07e345ef15
      - d3b774dc-4774-4577-9fe9-10680bc6e5e1
      - 44601183-a53e-4bf8-8801-d7f86e725299
      - 2518bb34-c292-4888-b633-76e41b145a52
      - f13b0f3d-a259-4bfe-80c5-463e0f3a34f4
      - 06e34a53-f65b-41d5-b3d9-5447af697407
      - be743f97-7362-4470-a8ff-1a1889ec1d58
      - d0e7c63f-6f8e-451e-b70b-3f233ff83c41
      - 33c85b96-1d2c-4fb1-9690-a4644eb4ea29
      - cf3a0aea-1ccb-4437-abb7-1a7e5ff2bd2a
      - 1480c004-50bc-436c-a798-361c8c5704d4
      - 891bea92-197f-4b6e-980b-c94847282c9f
      - 0f31e453-3689-4303-a9b3-9a39f06bab5b
      - bc584b79-f3a2-4f1e-90cd-978a9601fdad
      - e1f5a5f7-6cbc-4843-a1f2-d82f20964ca4
      - 607ea8b6-bef7-4e88-850e-61d7ba4d92ed
      - 94c5f23b-b047-4e38-9561-7a61281c297c
      - 126c30f1-94c5-48ca-bd14-be5da8dd731d
      - 6f081035-9291-4ba7-a0c9-24b3ed7151fe
      - 3c5eef4f-912c-4bc3-a6bd-d6428de1eb75
      - 3b50ee53-cd0f-4a7a-b168-d38faab5bd13
      - 7a3a7b7b-4dc0-4610-80fa-43e4ecf1cc38
      - 4520fd7d-7190-459a-88d3-0cd1718df55b
      - 428a7821-99e8-4f8b-add5-bc665d2c06a3
      - 2c8a1ba4-33f6-4a47-b7bf-4fb31a079ad8
      - 0c517e9d-a2a3-4ca9-88e5-96f6f2ad54d2
      - 6bfa9427-49d3-4326-bcd1-74734dbeabb0
      - 1259b2e6-ac51-48f6-8f8e-5e5d3d07bed8
      - 93b6b7ad-9a1e-4e98-8401-5dd1b49296ad
      - 67b6d522-d327-4e35-8cfb-a4fa3ed5ae4c
      - 04baee3d-7523-4fed-b362-50d7b4710b49
      - 3446aef2-aa76-4b2c-aa95-509fa19316f1
      - fc489f67-cfc2-45ab-9711-ebca34d9af05
      - 3f7c5f83-3001-4f0f-b8f6-2390ac8dab11
      - b8ec3bb1-7a6d-4b7a-bd85-7b6168e2b7c4
      - 42593c6d-9985-4e78-9001-4a4de98ff4f6
      - 3da40fea-e5c9-4b62-bcbd-23d372955318
      - b10bc1c7-c818-40f7-ade4-bda27acabd8a
      - 13578eeb-8213-4da1-a320-a9aa1482df8f
      - 8590eaad-1b98-41be-accb-97a8c4c4dab7
      - 6dd17ed0-0c88-419e-b915-16b077af39b5
  Subgraph-6:
    id: "6"
    name: PERBANK
    steps:
      - 12cc02fa-d179-4bbd-84b6-031b3218d3e0
      - 441fbf4f-1afc-4cae-b688-7728ad29c902
      - 5b74efbd-d98c-42fb-b7e1-b21ba181df63
      - 643c2501-55ef-472e-9330-8ef79f056145
      - 7405a2c0-754a-4b30-b541-237b4e7b4ab4
      - b43224ae-12fc-49ec-af60-f1406abd36ef
      - b618a304-e620-402c-8923-b50226604188
      - ba4b9d35-dad7-459e-b52b-c26f0f82d592
      - bd77a8bf-c414-44b6-be55-0c3fcf2b3b6b
      - fd223782-445b-49da-a126-e8601a870184
      - 05a42399-a55b-417a-9dad-bfea7d1f2e10
      - 18ff3a0f-2cca-4b93-a52b-4fbeb39910d3
      - 59bdf50b-f630-4fb7-926d-113db85d240d
      - 5a564f18-0399-4854-a084-b6339acd5744
      - 673ffafa-f00c-46dc-a78e-e2727bf141bf
      - 8fe95471-a5ba-4858-94f1-413c3fd94d75
      - b555e2e6-6add-4192-b0f1-80121c0bf847
      - b9202b0a-f482-4f54-98c3-a56b79ac059d
      - cdcd1510-f73b-478f-a3e0-2e634522abae
      - f5e2c941-5aef-4a4e-8a79-dc53e57aebe1
      - d125754e-1e4b-4838-b367-ad07f3793ce0
      - c3555d48-d1b9-4e8a-a762-1606a63a4556
      - 789eca53-8689-4c41-b3b9-37b6940ee25b
      - 6f308a05-6721-4405-b45e-a08a6b1166b2
      - 01473e81-3dc0-45cc-9603-020634e49b47
      - c96798bd-4f51-438a-b731-7ae27296a85c
      - 1871ae51-4fce-4aa9-9de7-6f2910d0eb24
      - 7b98d7fd-b186-4007-8916-9a1f1ded4377
      - 923798ee-63fd-47fe-897f-a0e9ca7789c8
      - 17dd0a47-746f-4360-b1ef-233efb5841e0
      - 811f5af6-93d3-4831-9e78-df186879cacc
      - f6b6bd4e-3570-48ce-93df-788d447e1dd3
      - 6875a4f0-f69d-4df1-ac58-4e01dd5af698
      - 4e91788f-8844-47f0-824a-f7bb90f352c5
      - 52bd40a2-2ed9-4e90-a601-8484737ccb08
      - 8fd8ba7c-b0b0-4972-b4d0-0e1d9e15bbc1
      - 13d1c8af-0c48-4ace-b508-1af23cb58c6b
      - ef7917d7-d9d4-4cf9-ba0f-0b534f6b96ca
      - 5cbb878f-a2ae-4e79-86a3-500e1ab7bc44
      - c8683cf8-e6b9-4226-bd13-bf302496bfe5
      - 5188d689-3f35-49c6-b161-594a98af8519
      - 6c9cc222-8bed-4827-93a4-0a361914513b
      - e2efc374-0226-444b-9d20-23cba34b41a4
      - ccb8977e-0f84-4b08-8ce3-495e35eb0e78
      - 9a41f32a-261d-4be0-8214-59a3e74f690f
      - 13b37cc3-1940-4541-81d9-51bcb8daad20
      - d2727d62-e699-4b0a-8da8-6bae9528dc6a
      - 84f6e88a-ff06-4fd7-8de7-732b84768e2b
      - 09978d73-d2f0-4ce3-bdad-9c1075f30464
      - 0db837e2-4841-461f-8d98-de9b5d584dfb
      - 02766fa7-a143-4e3b-8a62-3c5da875b03b
      - a8abc666-2053-4a14-8f3c-7848caaa8fa2
      - 06ad4cc2-c046-4f26-a7a3-447d60adcfb6
      - da6db79e-4e74-4f3f-91ee-9943a3776abc
      - 4a0310fa-31ce-41b1-9437-dede7b21a9d1
      - 0fafa107-9fb9-4acd-bb41-f2fd24119226
      - a549a68c-67b2-4e46-8928-b7a9c44cf093
      - 04f47c04-3625-4b43-a056-32e6ca9a01c8
      - 8dd5b23f-a064-4f3f-a46f-84faaf85cb4d
      - ee4853f1-5120-4ddd-8eb7-1cf917875d4b
      - eef66ee9-1f6a-4f90-b2b3-d60d9b7ec604
      - d8ed2c75-4b78-429f-8469-c48f6f515d1d
  Subgraph-7:
    id: "7"
    name: NORTHWIND
    steps:
      - 5227b055-b617-4f92-a4b7-cb5e5d48a457
      - 02b4d54e-fb22-483a-8c99-e8f5211297f7
      - 2da915e7-170d-4935-9278-6a4ec5718651
      - 35060809-0fdd-4b5a-ad2e-817bf4b37754
      - 45cf0047-cb99-4fe6-9aed-1f2b1f4ffdb2
      - 4df6e312-e1b0-4f56-87fc-40f00563e4f9
      - 5227b055-b617-4f92-a4b7-cb5e5d48a457
      - 71f29ed2-403b-41c7-b86a-30a6ae13403c
      - 74c8eb29-6597-424d-8294-b93f89e16f1b
      - 8257b9e1-bbc6-453e-8514-b64e99e9b062
      - bd78bfd7-ead0-4379-937c-c0a22f019c34
      - ccf242e9-0605-43d9-8f50-2593c59e03c6
      - e852ea61-4e6e-4631-9d90-2efc6370781d
      - f7bd8b91-95ca-47a4-b9a5-ebd33540471f
      - 0710082f-01ac-4023-8601-cf9c4ac6de6e
      - 086b83fe-93c6-443c-b4ed-37c4c6d657b4
      - 0c16bdda-a417-4cca-bdc4-3f6643f95826
      - 16b16e19-c8c1-4319-b112-72d793b8abc0
      - 34a4807d-aaab-4e4b-9bd7-e86920283377
      - 4c360913-be4e-4687-b383-34d12f4faf7c
      - 65ce8e9f-51af-4cd2-857a-f5f39c9ad67c
      - 84cf4b68-3c60-4590-8aa2-846848cb2a70
      - 87052623-cdbd-437a-bade-d9e96e0feb4c
      - 9c80e473-387e-4b21-9399-25a21a9b9d0e
      - b95832f8-314e-4081-8cb5-7e27fe398447
      - ecedd8a8-de99-4578-b6ca-9bf10a8fa407
      - fb8f1a51-77d4-4079-a87a-8eb27210d383
      - fe88165f-2eca-41d5-8c26-e8d745a5347c
      - a566a5fd-2614-4eaf-90eb-8d21affe7bf8
      - a93afbed-2361-4d5a-b235-906575e4cdc5
      - 390a6626-df7c-486f-b427-0f095a371602
      - de456ee6-c1ab-45ba-af58-d16ede986f5c
      - f27dda5b-8b76-4e71-b803-598ce8e66419
      - c3ced147-9edc-433a-b89d-42bb6fb7c921
      - b760cf19-c0c4-43e4-9d19-cf596c84d27d
      - 47baf016-f1e3-4041-a9d7-696281a63969
      - f5b1ac00-449f-4a4d-8f4a-228d2fb17c74
      - edf208cd-9d01-466c-9556-7114d5cffc1a
      - 9f21b8f9-c57e-437e-ad58-b05845c4cdf4
      - 037c345d-9cf6-4cf1-aaf4-41e181fd1748
      - b185a3ea-a8a5-458e-a813-c65b322eafa3
      - 9fb5e790-e586-4ce5-b204-a68e77300a01
      - 5aa8d15c-6abd-4712-b4b4-f2ed00b2ee29
      - d34e8b1a-d4b2-4e45-8232-918c00f2092c
      - a66a0c7a-47ea-4ad0-b552-134e16c937f0
      - 62b1a28f-121d-49e1-8cae-63b897715f9d
      - a6372c1b-8238-4683-8f35-967fd009ee69
      - 41e4325b-423b-41c3-a0e9-9545a44c9130
      - fb3efbb2-7b59-478c-9dcb-3fe4f9503299
      - 9c484e6d-65d9-44eb-a6f5-c5ded568379d
      - 28bba23b-ff79-44da-9809-549b73c6cedb
      - c43d4ef9-d396-46e6-b428-4ab8c3f7fb9e
      - 036131d8-a161-4d82-86a2-2b7475071461
      - 07299bb8-4002-463f-a624-f5621396c37b
      - 3ee687a7-024f-4600-a220-8ce8771a190e
      - 09fdf38e-3c6f-43de-b188-6687c6e807d3
      - 8dc5e92f-2871-4452-8111-8bac64a6d80f
      - dce6620c-dcd4-44ea-b573-98c541c613c5
      - ea66771e-9e18-4029-8271-09daff9eb176
      - 526672a7-3026-45cc-a9bb-65aa7d982535
      - 0e631246-8679-42f5-9c1f-02e67d07ffc8
      - 23f41166-465e-447a-be4c-471bb4205c05
      - 093e9c48-4002-485c-94f0-a4129b037c3c
      - a731eff1-f217-4238-b090-b15cf291327f
      - 6b2a64d3-143a-4807-a2a6-2465ac5130d8
      - ed2defe4-e0b9-4f28-89d1-26946a89c5d3
      - ff7866d8-13a7-4ef4-b986-047212e8f051
      - 2638d2bc-9cf1-4bac-9589-5f5348d01311
      - ae7eaa1e-6f97-4889-81f6-4a95c011a44a
      - 7572d22d-0539-4c29-b2ee-9412517bb39a
      - 1c9e62e8-8d3e-4152-9b0a-31f9a319923f
      - 9a7b0e37-0e26-4cbe-a561-23b8af6faed2
      - 4a253afe-f6e3-4a66-9d94-b96a8e53c606
      - d7413a88-a305-4546-aaf6-99a42c2b9a51
      - 3d77bf78-1c04-4b0b-9567-7a0f17c17b26
      - 7ce27c97-4e91-4d45-82d3-e923db410208
      - 4e66362b-c6ca-4ab2-9d0a-518fb0fea7e4
      - 253c4585-1c58-4ccb-9331-4b44737791e8
      - ae89981e-2d0f-4fc3-89c1-3596f7f8f358
      - 2c2056f5-5d9a-4eff-a8e1-a905648f4283
      - bb2bec41-1ce3-4869-b81d-cbd9b7ccaf4d
  Subgraph-8:
    id: "8"
    name: New Subgraph
    steps:
      - d7413a88-a305-4546-aaf6-99a42c2b9a51
version: 2
